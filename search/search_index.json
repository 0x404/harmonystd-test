{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u9996\u9875","text":""},{"location":"#arkts","title":"ArkTS\u6807\u51c6\u5e93\u63a5\u53e3\u6d4b\u8bd5","text":"<ul> <li>@ohos.util.ArrayList</li> <li>@ohos.util.Deque</li> <li>@ohos.util.HashMap</li> <li>@ohos.util.HashSet</li> <li>@ohos.util.LinkedList</li> <li>@ohos.util.List</li> <li>@ohos.util.PlainArray</li> <li>@ohos.util.Stack</li> <li>@ohos.util.TreeMap</li> <li>@ohos.util.TreeSet</li> <li>@ohos.util.Vector</li> </ul>"},{"location":"#typescript","title":"TypeScript\u6807\u51c6\u5e93\u6d4b\u8bd5","text":"<ul> <li>TS.ArrayList</li> <li>TS.HashMap</li> <li>TS.HashSet</li> </ul>"},{"location":"device/","title":"\u6d4b\u8bd5\u8bbe\u5907","text":""},{"location":"device/#_2","title":"\u786c\u4ef6\u4fe1\u606f","text":"\u786c\u4ef6\u7c7b\u578b \u4fe1\u606f GPU 12th Gen Intel(R) Core(TM) i5-12600KF Memory 32GB DDR4 3600HZ"},{"location":"device/#_3","title":"\u8f6f\u4ef6\u4fe1\u606f","text":"\u8f6f\u4ef6\u7c7b\u578b \u4fe1\u606f \u64cd\u4f5c\u7cfb\u7edf 10.0.22621.2861 (Win11 22H2 2022 Update) DevEco Studio devecostudio-windows-3.1.0.501"},{"location":"device/#typescript","title":"TypeScript\u73af\u5883","text":"\u7c7b\u578b \u4fe1\u606f node.js v16.19.1 tsc Version 5.3.3"},{"location":"device/#deveco","title":"DevEco\u865a\u62df\u673a","text":""},{"location":"device/#huawei-phone","title":"Huawei Phone","text":"\u7c7b\u578b \u4fe1\u606f CPU cores 4 RamSize 6144MB CPU/ABI X86 API 9 Density 450dpi ScreenSize 6.6\""},{"location":"llm/","title":"\u5927\u6a21\u578b\u751f\u6210\u6d4b\u8bd5\u7528\u4f8b","text":""},{"location":"llm/#ohosutildequeconstructor","title":"@ohos.util.Deque.constructor","text":"<pre><code>import ohos.util.Deque from '@ohos.util.Deque';\n\nfunction test_constructor() {\n  const startTime = new Date();\n  let deque = new Deque();\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  console.log(`Test constructor: ${executionTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutildequeinsertfront","title":"@ohos.util.Deque.insertFront","text":"<pre><code>import Deque from '@ohos.util.Deque';\n\nfunction test_insertFront(loopCount: number) {\n  let deque = new Deque();\n\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    deque.insertFront(i);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`insertFront: ${averageTime} ms`);\n}\n\ntest_insertFront(10000);\n</code></pre>"},{"location":"llm/#ohosutildequeinsertend","title":"@ohos.util.Deque.insertEnd","text":"<pre><code>import ohos.util.Deque from @ohos.util.Deque;\n\nfunction test_insertEnd(loopCount: number) {\n  let deque = new Deque();\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    deque.insertEnd(i);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutildequehas","title":"@ohos.util.Deque.has","text":"<pre><code>import ohos.util.Deque from @ohos.util.Deque;\n\nfunction test_has(loopCount: number) {\n  let deque = new Deque();\n  for (let i = 0; i &lt; loopCount; i++) {\n    deque.insertFront(i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    deque.has(i);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutildequepopfirst","title":"@ohos.util.Deque.popFirst","text":"<pre><code>import Deque from '@ohos.util.Deque';\n\nfunction test_popFirst(loopCount: number) {\n  let deque = new Deque&lt;number&gt;();\n  for (let i = 0; i &lt; loopCount; i++) {\n    deque.insertFront(i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    deque.popFirst();\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutildequepoplast","title":"@ohos.util.Deque.popLast","text":"<pre><code>import Deque from 'ohos.util.Deque';\n\nfunction test_popLast() {\n  let deque = new Deque();\n  deque.insertFront(2);\n  deque.insertEnd(4);\n  deque.insertFront(5);\n  deque.insertFront(2);\n  deque.insertFront(4);\n\n  const startTime = new Date();\n  let result = deque.popLast(); \n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n\n  console.log(`popLast result: ${result}`);\n  console.log(`Execution time: ${executionTime} ms`);\n}\n\ntest_popLast();\n</code></pre>"},{"location":"llm/#ohosutildequeforeach","title":"@ohos.util.Deque.forEach","text":"<pre><code>import Deque from '@ohos.util.Deque';\n\nfunction test_forEach(loopCount: number) {\n  let deque = new Deque&lt;number&gt;();\n  for (let i = 0; i &lt; loopCount; i++) {\n    deque.insertEnd(i);\n  }\n\n  const startTime = new Date();\n  deque.forEach((value, index) =&gt; {\n    // callback function\n    console.log(\"value:\" + value, \"index:\" + index);\n  });\n  const endTime = new Date();\n\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`Time taken for forEach: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutildequegetfirst","title":"@ohos.util.Deque.getFirst","text":"<pre><code>import Deque from '@ohos.util.Deque';\n\nfunction test_getFirst(loopCount: number) {\n  let deque = new Deque&lt;number&gt;();\n  for (let i = 0; i &lt; loopCount; i++) {\n    deque.insertEnd(i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    let result = deque.getFirst();\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutildequegetlast","title":"@ohos.util.Deque.getLast","text":"<pre><code>import ohos.util.Deque from @ohos.util.Deque\n\nfunction test_getLast() {\n  let deque = new Deque();\n  deque.insertFront(2);\n  deque.insertFront(4);\n  deque.insertFront(5);\n  deque.insertFront(4);\n  const startTime = new Date();\n  let result = deque.getLast();\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  console.log(`!test_getLast: Last element is ${result}. Took ${executionTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutilhashmapconstructor","title":"@ohos.util.HashMap.constructor","text":"<pre><code>function test_hashmap_constructor() {\n  const startTime = new Date();\n  let hashMap = new HashMap();\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  console.log(`HashMap constructor executed in ${executionTime} ms`);\n}\n\ntest_hashmap_constructor();\n</code></pre>"},{"location":"llm/#ohosutilhashmapisempty","title":"@ohos.util.HashMap.isEmpty","text":"<pre><code>import ohos.util.HashMap from @ohos.util.HashMap\n\nfunction test_isEmpty() {\n  const hashMap = new HashMap();\n  const startTime = new Date();\n  const result = hashMap.isEmpty();\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  console.log(`isEmpty: ${result}`);\n  console.log(`Execution Time: ${executionTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutilhashmaphaskey","title":"@ohos.util.HashMap.hasKey","text":"<pre><code>import ohos.utils.HashMap;\n\nfunction test_hasKey(loopCount: number) {\n  let hashMap = new HashMap();\n  for (let i = 0; i &lt; loopCount; i++) {\n    hashMap.set(`key${i}`, i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    hashMap.hasKey(`key${i}`);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutilhashmaphasvalue","title":"@ohos.util.HashMap.hasValue","text":"<pre><code>function test_hasValue(loopCount: number) {\n  let hashMap = new ohos.util.HashMap();\n  for (let i = 0; i &lt; loopCount; i++) {\n    hashMap.set(\"key\" + i, i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    const result = hashMap.hasValue(i);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutilhashmapget","title":"@ohos.util.HashMap.get","text":"<pre><code>import HashMap from '@ohos.util.HashMap';\n\nfunction test_get(loopCount: number) {\n  let hashMap = new HashMap();\n  for (let i = 0; i &lt; loopCount; i++) {\n    hashMap.set(i.toString(), i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    hashMap.get(i.toString());\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutilhashmapsetall","title":"@ohos.util.HashMap.setAll","text":"<pre><code>function test_setAll() {\n  let hashMap1 = new ohos.util.HashMap();\n  hashMap1.set(\"squirrel\", 123);\n  hashMap1.set(\"sparrow\", 356);\n  let hashMap2 = new ohos.util.HashMap();\n\n  console.log(\"Before setAll:\");\n  console.log(\"HashMap 1:\");\n  for (let key of hashMap1.keys()) {\n    console.log(`Key: ${key}, Value: ${hashMap1.get(key)}`);\n  }\n  console.log(\"HashMap 2:\");\n  for (let key of hashMap2.keys()) {\n    console.log(`Key: ${key}, Value: ${hashMap2.get(key)}`);\n  }\n\n  hashMap1.setAll(hashMap2);\n\n  console.log(\"After setAll:\");\n  console.log(\"HashMap 1:\");\n  for (let key of hashMap1.keys()) {\n    console.log(`Key: ${key}, Value: ${hashMap1.get(key)}`);\n  }\n  console.log(\"HashMap 2:\");\n  for (let key of hashMap2.keys()) {\n    console.log(`Key: ${key}, Value: ${hashMap2.get(key)}`);\n  }\n}\n\ntest_setAll();\n</code></pre>"},{"location":"llm/#ohosutilhashmapset","title":"@ohos.util.HashMap.set","text":"<pre><code>import ohos.util.HashMap from '@ohos.util.HashMap';\n\nfunction test_set(loopCount: number) {\n  const hashMap = new HashMap();\n  const keys: string[] = [];\n  const values: any[] = [];\n  for (let i = 0; i &lt; loopCount; i++) {\n    keys.push(\"key\" + i);\n    values.push(\"value\" + i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    hashMap.set(keys[i], values[i]);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutilhashmapremove","title":"@ohos.util.HashMap.remove","text":"<pre><code>import ohos.util.HashMap from @ohos.util.HashMap;\n\nfunction test_remove(loopCount: number) {\n  let hashMap = new HashMap();\n  for (let i = 0; i &lt; loopCount; i++) {\n    hashMap.set(i.toString(), i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    hashMap.remove(i.toString());\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutilhashmapclear","title":"@ohos.util.HashMap.clear","text":"<pre><code>import ohos.util.HashMap from \"@ohos.util.HashMap\";\n\nfunction test_clear() {\n  let hashMap = new HashMap();\n  hashMap.set(\"squirrel\", 123);\n  hashMap.set(\"sparrow\", 356);\n\n  const startTime = new Date();\n  hashMap.clear();\n  const endTime = new Date();\n\n  const executionTime = endTime.getTime() - startTime.getTime();\n  console.log(`The API took ${executionTime} ms to clear the HashMap.`);\n}\n</code></pre>"},{"location":"llm/#ohosutilhashmapkeys","title":"@ohos.util.HashMap.keys","text":"<pre><code>import HashMap from '@ohos.util.HashMap';\n\nfunction test_keys(loopCount: number) {\n  let hashMap = new HashMap&lt;number, string&gt;();\n  for (let i = 0; i &lt; loopCount; i++) {\n    hashMap.set(i, \"value\" + i);\n  }\n  const startTime = new Date();\n  const iter = hashMap.keys();\n  let temp = iter.next().value;\n  while(temp !== undefined) {\n    temp = iter.next().value;\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  console.log(`Test completed in ${executionTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutilhashmapvalues","title":"@ohos.util.HashMap.values","text":"<pre><code>function test_values(loopCount: number) {\n  let hashMap = new HashMap();\n  hashMap.set(\"squirrel\", 123);\n  hashMap.set(\"sparrow\", 356);\n\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    let iter = hashMap.values();\n    let temp = iter.next().value;\n    while (temp != undefined) {\n      temp = iter.next().value;\n    }\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutilhashmapreplace","title":"@ohos.util.HashMap.replace","text":"<pre><code>import ohos.util.HashMap from '@ohos.util.HashMap';\n\nfunction test_replace(loopCount: number) {\n  let hashMap = new HashMap();\n  // Populate the hashMap with initial data\n  for (let i = 0; i &lt; loopCount; i++) {\n    hashMap.set(`key${i}`, i);\n  }\n  const startTime = new Date();\n  // Replace the elements in the hashMap\n  for (let i = 0; i &lt; loopCount; i++) {\n    hashMap.replace(`key${i}`, i+1);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n\n// Test the replace API with 100 elements\ntest_replace(100);\n```### @ohos.util.HashMap.forEach \n\n```typescript\nfunction test_forEach(loopCount: number) {\n  let hashMap = new HashMap();\n  for (let i = 0; i &lt; loopCount; i++) {\n    hashMap.set(i.toString(), i);\n  }\n  const startTime = new Date();\n  hashMap.forEach((value, key) =&gt; {\n    console.log(\"value:\" + value, \"key:\" + key);\n  });\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!test_forEach: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutilhashmapentries","title":"@ohos.util.HashMap.entries","text":"<pre><code>function test_entries(loopCount: number) {\n  let hashMap = new HashMap();\n  for (let i = 0; i &lt; loopCount; i++) {\n    hashMap.set(\"key\" + i, \"value\" + i);\n  }\n  const startTime = new Date();\n  let iterator = hashMap.entries();\n  let temp = iterator.next().value;\n  while (temp != undefined) {\n    console.log(\"key: \" + temp[0]);\n    console.log(\"value: \" + temp[1]);\n    temp = iterator.next().value;\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutillinkedlistconstructor","title":"@ohos.util.LinkedList.constructor","text":"<pre><code>import ohos.util.LinkedList from '@ohos.util.LinkedList';\n\nfunction test_constructor() {\n  const startTime = new Date();\n  const linkedList = new LinkedList();\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  console.log(`LinkedList constructor execution time: ${executionTime} ms`);\n}\n\ntest_constructor();\n</code></pre>"},{"location":"llm/#ohosutillinkedlistadd","title":"@ohos.util.LinkedList.add","text":"<pre><code>import LinkedList from '@ohos.util.LinkedList';\n\nfunction test_add(loopCount: number) {\n  let linkedList = new LinkedList();\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    linkedList.add(i);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!test_add: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutillinkedlistaddfirst","title":"@ohos.util.LinkedList.addFirst","text":"<pre><code>function test_addFirst(loopCount: number) {\n  let linkedList = new LinkedList();\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    linkedList.addFirst(i);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutillinkedlistinsert","title":"@ohos.util.LinkedList.insert","text":"<pre><code>import ohos.util.LinkedList from '@ohos.util.LinkedList';\n\nfunction test_insert(loopCount: number) {\n  let linkedList = new LinkedList();\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    linkedList.insert(i, i);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n```### @ohos.util.LinkedList.has \n\n```typescript\nimport ohos.util.LinkedList from @ohos.util.LinkedList\n\nfunction test_has(loopCount: number) {\n  const linkedList = new LinkedList();\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    const result1 = linkedList.has(\"squirrel\");\n  }\n  linkedList.add(\"squirrel\");\n  for (let i = 0; i &lt; loopCount; i++) {\n    const result = linkedList.has(\"squirrel\");\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n```### @ohos.util.LinkedList.get \n\n```typescript\nimport LinkedList from '@ohos.util.LinkedList';\n\nfunction test_get() {\n  let linkedList = new LinkedList&lt;number&gt;();\n  linkedList.add(2);\n  linkedList.add(4);\n  linkedList.add(5);\n  linkedList.add(2);\n  linkedList.add(1);\n  linkedList.add(2);\n  linkedList.add(4);\n\n  const startTime = new Date();\n  let result = linkedList.get(2);\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  console.log(`get API execution time: ${executionTime} ms`);\n  console.log(`Result: ${result}`);\n}\n</code></pre>"},{"location":"llm/#ohosutillinkedlistgetlastindexof","title":"@ohos.util.LinkedList.getLastIndexOf","text":"<pre><code>import LinkedList from 'ohos.util.LinkedList';\n\nfunction test_getLastIndexOf() {\n  let linkedList = new LinkedList&lt;number&gt;();\n  linkedList.add(2);\n  linkedList.add(4);\n  linkedList.add(5);\n  linkedList.add(2);\n  linkedList.add(1);\n  linkedList.add(2);\n  linkedList.add(4);\n\n  const startTime = new Date();\n  let result = linkedList.getLastIndexOf(2);\n  const endTime = new Date();\n\n  const executionTime = endTime.getTime() - startTime.getTime();\n  console.log(`getLastIndexOf Execution Time: ${executionTime} ms, Result: ${result}`);\n}\n\ntest_getLastIndexOf();\n```### @ohos.util.LinkedList.getIndexOf \n\n```typescript\nfunction test_getIndexOf(loopCount: number) {\n  let linkedList = new LinkedList&lt;number&gt;();\n  for (let i = 0; i &lt; loopCount; i++) {\n    linkedList.add(i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    const index = linkedList.getIndexOf(i);\n    console.log(`Element ${i} is found at index ${index}`);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutillinkedlistremovebyindex","title":"@ohos.util.LinkedList.removeByIndex","text":"<pre><code>function test_removeByIndex(loopCount: number) {\n  let linkedList = new LinkedList&lt;number&gt;();\n  for (let i = 0; i &lt; loopCount; i++) {\n    linkedList.add(i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    linkedList.removeByIndex(i);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutillinkedlistremovefirst","title":"@ohos.util.LinkedList.removeFirst","text":"<pre><code>import ohos.util.LinkedList from '@ohos.util.LinkedList';\n\nfunction test_removeFirst(loopCount: number) {\n  let linkedList = new LinkedList&lt;number&gt;();\n  for (let i = 0; i &lt; loopCount; i++) {\n    linkedList.add(i);\n  }\n\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    linkedList.removeFirst();\n  }\n  const endTime = new Date();\n\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n\ntest_removeFirst(10000);\n</code></pre>"},{"location":"llm/#ohosutillinkedlistremovelast","title":"@ohos.util.LinkedList.removeLast","text":"<pre><code>import ohos.util.LinkedList from @ohos.util.LinkedList\n\nfunction test_removeLast(loopCount: number) {\n  let linkedList = new LinkedList&lt;number&gt;();\n  for (let i = 0; i &lt; loopCount; i++) {\n    linkedList.add(i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    linkedList.removeLast();\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutillinkedlistremove","title":"@ohos.util.LinkedList.remove","text":"<pre><code>import ohos.util.LinkedList from '@ohos.util.LinkedList';\n\nfunction test_remove(loopCount: number) {\n  let linkedList = new LinkedList&lt;number&gt;();\n  for (let i = 0; i &lt; loopCount; i++) {\n    linkedList.add(i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    linkedList.remove(i);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutillinkedlistremovefirstfound","title":"@ohos.util.LinkedList.removeFirstFound","text":"<pre><code>function test_removeFirstFound(loopCount: number) {\n  let linkedList = new LinkedList&lt;number&gt;();\n  for (let i = 0; i &lt; loopCount; i++) {\n    linkedList.add(i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    linkedList.removeFirstFound(i);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutillinkedlistremovelastfound","title":"@ohos.util.LinkedList.removeLastFound","text":"<pre><code>import LinkedList from '@ohos.util.LinkedList';\n\nfunction test_removeLastFound(loopCount: number) {\n  let linkedList = new LinkedList&lt;number&gt;();\n\n  for (let i = 0; i &lt; loopCount; i++) {\n    linkedList.add(i);\n  }\n\n  const startTime = new Date();\n  linkedList.removeLastFound(loopCount - 1);\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  console.log(`!${test_id}: ${executionTime} ms`);\n}\n\ntest_removeLastFound(100);\n</code></pre>"},{"location":"llm/#ohosutillinkedlistclone","title":"@ohos.util.LinkedList.clone","text":"<pre><code>import LinkedList from '@ohos.util.LinkedList';\n\nfunction test_clone() {\n  let linkedList = new LinkedList();\n  linkedList.add(2);\n  linkedList.add(4);\n  linkedList.add(5);\n  linkedList.add(4);\n\n  const startTime = new Date();\n  let result = linkedList.clone();\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  console.log(`Clone execution time: ${executionTime} ms`);\n}\n\ntest_clone();\n</code></pre>"},{"location":"llm/#ohosutillinkedlistforeach","title":"@ohos.util.LinkedList.forEach","text":"<pre><code>import ohos.util.LinkedList from \"@ohos.util.LinkedList\";\n\nfunction test_forEach(callbackFn: Function) {\n  let linkedList = new LinkedList();\n  linkedList.add(2);\n  linkedList.add(4);\n  linkedList.add(5);\n  linkedList.add(4);\n\n  const startTime = new Date();\n  linkedList.forEach(callbackFn);\n  const endTime = new Date();\n\n  const executionTime = endTime.getTime() - startTime.getTime();\n  console.log(`Execution time: ${executionTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutillinkedlistclear","title":"@ohos.util.LinkedList.clear","text":"<pre><code>import ohos.util.LinkedList from \"@ohos.util.LinkedList\";\n\nfunction test_clear() {\n  let linkedList = new LinkedList&lt;number&gt;();\n  linkedList.add(2);\n  linkedList.add(4);\n  linkedList.add(5);\n  linkedList.add(4);\n\n  const startTime = new Date();\n  linkedList.clear();\n  const endTime = new Date();\n\n  const executionTime = endTime.getTime() - startTime.getTime();\n  console.log(`Clear execution time: ${executionTime} ms`);\n}\n\ntest_clear();\n</code></pre>"},{"location":"llm/#ohosutillinkedlistset","title":"@ohos.util.LinkedList.set","text":"<pre><code>import LinkedList from '@ohos.util.LinkedList';\n\nfunction test_set(loopCount: number) {\n  let linkedList = new LinkedList();\n  for (let i = 0; i &lt; loopCount; i++) {\n    linkedList.add(i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    linkedList.set(i, \"b\");\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutillinkedlistconverttoarray","title":"@ohos.util.LinkedList.convertToArray","text":"<pre><code>function test_convertToArray() {\n  let linkedList = new LinkedList();\n  linkedList.add(2);\n  linkedList.add(4);\n  linkedList.add(5);\n  linkedList.add(4);\n  const startTime = new Date();\n  let result = linkedList.convertToArray();\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutillinkedlistgetfirst","title":"@ohos.util.LinkedList.getFirst","text":"<pre><code>import ohos.util.LinkedList from '@ohos.util.LinkedList';\n\nfunction test_getFirst(loopCount: number) {\n  let linkedList = new LinkedList&lt;number&gt;();\n  for (let i = 0; i &lt; loopCount; i++) {\n    linkedList.add(i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    let result = linkedList.getFirst();\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutillinkedlistgetlast","title":"@ohos.util.LinkedList.getLast","text":"<pre><code>import LinkedList from '@ohos.util.LinkedList';\n\nfunction test_getLast(loopCount: number) {\n  let linkedList = new LinkedList&lt;number&gt;();\n  for (let i = 0; i &lt; loopCount; i++) {\n    linkedList.add(i);\n  }\n\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    linkedList.getLast();\n  }\n  const endTime = new Date();\n\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n```### @ohos.util.List.constructor \n\n```typescript\nimport List from '@ohos.util.List';\n\nfunction test_constructor() {\n  const startTime = new Date();\n  let list = new List();\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  console.log(`Test constructor: ${executionTime} ms`);\n}\n\ntest_constructor();\n```### @ohos.util.List.add \n\n```typescript\nimport ohos.util.List from @ohos.util.List;\n\nfunction test_add(loopCount: number) {\n  let list = new List();\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    list.add(i);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutillistinsert","title":"@ohos.util.List.insert","text":"<pre><code>import ohos.util.List from @ohos.util.List\n\nfunction test_insert(loopCount: number) {\n  let list = new List();\n  for (let i = 0; i &lt; loopCount; i++) {\n    const element = Math.random();\n    const index = Math.floor(Math.random() * (list.size() + 1));\n    const startTime = new Date();\n    list.insert(element, index);\n    const endTime = new Date();\n    const executionTime = endTime.getTime() - startTime.getTime();\n    console.log(`Test ${i + 1}: Inserted element ${element} at index ${index} in ${executionTime} ms`);\n  }\n}\n\ntest_insert(10);\n</code></pre>"},{"location":"llm/#ohosutillisthas","title":"@ohos.util.List.has","text":"<pre><code>import ohos.util.List from '@ohos.util.List';\n\nfunction test_has(loopCount: number) {\n  let list = new List();\n  for (let i = 0; i &lt; loopCount; i++) {\n    list.add(i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    list.has(i);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutillistget","title":"@ohos.util.List.get","text":"<pre><code>import ohos.util.List from '@ohos.util.List';\n\nfunction test_get(loopCount: number) {\n  let list = new List&lt;number&gt;();\n  for (let i = 0; i &lt; loopCount; i++) {\n    list.add(i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    let result = list.get(i);\n    console.log(result);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutillistgetlastindexof","title":"@ohos.util.List.getLastIndexOf","text":"<pre><code>import List from '@ohos.util.List';\n\nfunction test_getLastIndexOf(loopCount: number) {\n  let list = new List&lt;number&gt;();\n  for (let i = 0; i &lt; loopCount; i++) {\n    list.add(i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    list.getLastIndexOf(i);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutillistgetindexof","title":"@ohos.util.List.getIndexOf","text":"<pre><code>import List from '@ohos.util.List';\n\nfunction test_getIndexOf(loopCount: number) {\n  let list = new List&lt;number&gt;();\n  for (let i = 0; i &lt; loopCount; i++) {\n    list.add(i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    list.getIndexOf(i);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutillistequal","title":"@ohos.util.List.equal","text":"<pre><code>import ohos.util.List from \"@ohos.util.List\";\n\nfunction test_equal() {\n  let list = new List();\n  list.add(2);\n  list.add(4);\n  list.add(5);\n  list.add(2);\n\n  let obj1 = new List();\n  obj1.add(2);\n  obj1.add(4);\n  obj1.add(5);\n\n  let startTime = new Date();\n  list.equal(obj1);\n  let endTime = new Date();\n\n  let executionTime = endTime.getTime() - startTime.getTime();\n  console.log(`Execution time: ${executionTime} ms`);\n\n  let obj2 = {name: \"Dylon\", age: \"13\"};\n\n  startTime = new Date();\n  let result = list.equal(obj2);\n  endTime = new Date();\n\n  executionTime = endTime.getTime() - startTime.getTime();\n  console.log(`Execution time: ${executionTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutillistremovebyindex","title":"@ohos.util.List.removeByIndex","text":"<pre><code>import ohos.util.List from @ohos.util.List \n\nfunction test_removeByIndex(loopCount: number) {\n  let list = new List&lt;number&gt;();\n  for (let i = 0; i &lt; loopCount; i++) {\n    list.add(i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    list.removeByIndex(i);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutillistremove","title":"@ohos.util.List.remove","text":"<pre><code>import ohos.util.List from \"@ohos.util.List\";\n\nfunction test_remove(loopCount: number) {\n  let list = new List&lt;number&gt;();\n  for (let i = 0; i &lt; loopCount; i++) {\n    list.add(i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    list.remove(i);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutillistreplaceallelements","title":"@ohos.util.List.replaceAllElements","text":"<pre><code>import ohos.util.List from '@ohos.util.List';\n\nfunction test_replaceAllElements() {\n  let list = new List();\n  list.add(2);\n  list.add(4);\n  list.add(5);\n  list.add(4);\n\n  const startTime = new Date();\n  list.replaceAllElements((value: number, index: number) =&gt; {\n    return value = 2 * value;\n  });\n  list.replaceAllElements((value: number, index: number) =&gt; {\n    return value = value - 2;\n  });\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  console.log(`API execution time: ${executionTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutillistforeach","title":"@ohos.util.List.forEach","text":"<pre><code>import List from '@ohos.util.List';\n\nfunction test_forEach() {\n  let list = new List();\n  list.add(2);\n  list.add(4);\n  list.add(5);\n  list.add(4);\n\n  const startTime = new Date();\n  list.forEach((value, index) =&gt; {\n    console.log(\"value:\" + value, \"index:\" + index);\n  });\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  console.log(`Execution time: ${executionTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutillistsort","title":"@ohos.util.List.sort","text":"<pre><code>import List from '@ohos.util.List';\n\nfunction test_sort() {\n  let list = new List();\n  list.add(2);\n  list.add(4);\n  list.add(5);\n  list.add(4);\n\n  const startTime = new Date();\n  list.sort((a: number, b: number) =&gt; a - b);\n  const endTime = new Date();\n\n  const executionTime = endTime.getTime() - startTime.getTime();\n  console.log(`Sort test: ${executionTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutillistgetsublist","title":"@ohos.util.List.getSubList","text":"<pre><code>import ohos.util.List from \"@ohos.util.List\";\n\nfunction test_getSubList(loopCount: number) {\n  let list = new List();\n  for (let i = 0; i &lt; loopCount; i++) {\n    list.add(i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    let result = list.getSubList(2, 4);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutillistclear","title":"@ohos.util.List.clear","text":"<pre><code>import ohos.util.List from @ohos.util.List\n\nfunction test_clear(loopCount: number) {\n  let list = new List&lt;number&gt;();\n  for (let i = 0; i &lt; loopCount; i++) {\n    list.add(i);\n  }\n  const startTime = new Date();\n  list.clear();\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutillistset","title":"@ohos.util.List.set","text":"<pre><code>import List from '@ohos.util.List';\n\nfunction test_set(loopCount: number) {\n  let list = new List&lt;number&gt;();\n  for (let i = 0; i &lt; loopCount; i++) {\n    list.add(i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    list.set(i, loopCount-i);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutillistconverttoarray","title":"@ohos.util.List.convertToArray","text":"<pre><code>function test_convertToArray(loopCount: number) {\n  let list = new List();\n  for (let i = 0; i &lt; loopCount; i++) {\n    list.add(i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    list.convertToArray();\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n```### @ohos.util.List.isEmpty \n\n```typescript\nimport List from '@ohos.util.List';\n\nfunction test_isEmpty() {\n  let list = new List&lt;number&gt;();\n  list.add(2);\n  list.add(4);\n  list.add(5);\n  list.add(4);\n\n  const startTime = new Date();\n  let result = list.isEmpty();\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n\n  console.log(`isEmpty(): ${result}`);\n  console.log(`Execution time: ${executionTime} ms`);\n}\n\ntest_isEmpty();\n```### @ohos.util.List.getFirst \n\n```typescript\n\u751f\u6210\u7684\u6d4b\u8bd5\u7528\u4f8b\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```typescript\nimport List from '@ohos.util.List';\n\nfunction test_getFirst() {\n  let list = new List();\n  list.add(2);\n  list.add(4);\n  list.add(5);\n  list.add(4);\n\n  const startTime = new Date();\n  const result = list.getFirst();\n  const endTime = new Date();\n\n  const executionTime = endTime.getTime() - startTime.getTime();\n  console.log(`API execution time: ${executionTime} ms`);\n  console.log(`Result: ${result}`);\n}\n\ntest_getFirst();\n```### @ohos.util.List.getLast \n\n```typescript\nimport ohos.util.List from '@ohos.util.List'\n\nfunction test_getLast(loopCount: number) {\n  let list = new List&lt;number&gt;();\n  for (let i = 0; i &lt; loopCount; i++) {\n    list.add(i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    list.getLast();\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutilqueueconstructor","title":"@ohos.util.Queue.constructor","text":"<pre><code>import Queue from '@ohos.util.Queue';\n\nfunction test_constructor() {\n  const startTime = new Date();\n  const queue = new Queue();\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  console.log(`!{test_id}: ${executionTime} ms`);\n}\n```### @ohos.util.Queue.add \n\n```typescript\nimport Queue from '@ohos.util.Queue';\n\nfunction test_add(loopCount: number) {\n  let queue = new Queue();\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    queue.add(i);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutilqueuepop","title":"@ohos.util.Queue.pop","text":"<pre><code>import ohos.util.Queue from @ohos.util.Queue\n\nfunction test_pop(loopCount: number) {\n  let queue = new Queue&lt;number&gt;();\n  for (let i = 0; i &lt; loopCount; i++) {\n    queue.add(i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    queue.pop();\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutilqueuegetfirst","title":"@ohos.util.Queue.getFirst","text":"<pre><code>import ohos.util.Queue from @ohos.util.Queue;\n\nfunction test_getFirst() {\n  let queue = new Queue();\n  queue.add(2);\n  queue.add(4);\n  queue.add(5);\n  queue.add(2);\n  const startTime = new Date();\n  let result = queue.getFirst();\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutilqueueforeach","title":"@ohos.util.Queue.forEach","text":"<pre><code>import Queue from '@ohos.util.Queue';\n\nfunction test_forEach() {\n  // Create a new queue\n  let queue = new Queue&lt;number&gt;();\n\n  // Add elements to the queue\n  queue.add(2);\n  queue.add(4);\n  queue.add(5);\n  queue.add(4);\n\n  // Perform the forEach operation\n  queue.forEach((value, index) =&gt; {\n    console.log(`value: ${value}, index: ${index}`);\n  });\n}\n\n// Test the forEach operation\ntest_forEach();\n</code></pre>"},{"location":"llm/#ohosutilstackconstructor","title":"@ohos.util.Stack.constructor","text":"<pre><code>import ohos.util.Stack from @ohos.util.Stack;\n\nfunction test_constructor() {\n  const startTime = new Date();\n  let stack = new Stack();\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  console.log(`Test constructor: ${executionTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutilstackpush","title":"@ohos.util.Stack.push","text":"<pre><code>import Stack from 'ohos.util.Stack';\n\nfunction test_push(loopCount: number) {\n  let stack = new Stack();\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    stack.push('test');\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n\ntest_push(1000);\n</code></pre>"},{"location":"llm/#ohosutilstackpop","title":"@ohos.util.Stack.pop","text":"<pre><code>import ohos.util.Stack from @ohos.util.Stack\n\nfunction test_pop() {\n  let stack = new Stack();\n  stack.push(2);\n  stack.push(4);\n  stack.push(5);\n  stack.push(2);\n  stack.push(4);\n\n  const startTime = new Date();\n  let result = stack.pop();\n  const endTime = new Date();\n\n  console.log(`Result: ${result}`);\n  console.log(`Execution Time: ${endTime.getTime() - startTime.getTime()} ms`);\n}\n\ntest_pop();\n</code></pre>"},{"location":"llm/#ohosutilstackpeek","title":"@ohos.util.Stack.peek","text":"<pre><code>import Stack from '@ohos.util.Stack';\nfunction test_peek() {\n  let stack = new Stack&lt;number&gt;();\n  stack.push(2);\n  stack.push(4);\n  stack.push(5);\n  stack.push(2);\n\n  const startTime = new Date();\n  let result = stack.peek();\n  const endTime = new Date();\n\n  console.log(`Peeked element: ${result}`);\n  console.log(`Execution time: ${endTime.getTime() - startTime.getTime()} ms`);\n}\n\ntest_peek();\n</code></pre>"},{"location":"llm/#ohosutilstacklocate","title":"@ohos.util.Stack.locate","text":"<pre><code>import Stack from '@ohos.util.Stack';\n\nfunction test_locate(loopCount: number) {\n  let stack = new Stack&lt;number&gt;();\n  for (let i = 0; i &lt; loopCount; i++) {\n    stack.push(i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    stack.locate(i);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n\n// Example usage\ntest_locate(1000);\n```### @ohos.util.Stack.forEach \n\n```typescript\nimport Stack from '@ohos.util.Stack';\n\nfunction test_forEach(loopCount: number) {\n  let stack = new Stack&lt;number&gt;();\n  for (let i = 0; i &lt; loopCount; i++) {\n    stack.push(i);\n  }\n  const startTime = new Date();\n  stack.forEach((value, index) =&gt; {\n    console.log(\"value:\" + value, \"index:\" + index);\n  });\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n```### @ohos.util.Stack.isEmpty \n\n```typescript\nimport ohos.util.Stack from @ohos.util.Stack\n\nfunction test_isEmpty() {\n  let stack = new Stack();\n\n  console.log(\"Test Case 1:\");\n  console.log(\"Expected: true\");\n  console.log(\"Actual  : \" + stack.isEmpty());\n  console.log(\"\");\n\n  console.log(\"Test Case 2:\");\n  stack.push(1);\n  stack.push(2);\n  console.log(\"Expected: false\");\n  console.log(\"Actual  : \" + stack.isEmpty());\n  console.log(\"\");\n}\n\ntest_isEmpty()\n</code></pre>"},{"location":"llm/#ohosutilvectorconstructor","title":"@ohos.util.Vector.constructor","text":"<pre><code>import Vector from '@ohos.util.Vector';\n\nfunction test_constructor() {\n  const startTime = new Date();\n  const vector = new Vector();\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  console.log(`Constructor: ${executionTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutilvectoradd","title":"@ohos.util.Vector.add","text":"<pre><code>import ohos.util.Vector from @ohos.util.Vector\n\nfunction test_add(loopCount: number) {\n  let vector = new Vector();\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    vector.add(i);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutilvectorinsert","title":"@ohos.util.Vector.insert","text":"<pre><code>import Vector from '@ohos.util.Vector';\n\nfunction test_insert(loopCount: number) {\n  let vector = new Vector();\n  for (let i = 0; i &lt; loopCount; i++) {\n    vector.insert(i, i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    vector.insert(`element_${i}`, i);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutilvectorhas","title":"@ohos.util.Vector.has","text":"<pre><code>import Vector from \"@ohos.util.Vector\";\n\nfunction test_has(loopCount: number) {\n  let vector = new Vector&lt;string&gt;();\n  for (let i = 0; i &lt; loopCount; i++) {\n    vector.add(\"squirrel\");\n  }\n\n  const startTime = new Date();\n\n  for (let i = 0; i &lt; loopCount; i++) {\n    vector.has(\"squirrel\");\n  }\n\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutilvectorgetindexof","title":"@ohos.util.Vector.getIndexOf","text":"<pre><code>import Vector from '@ohos.util.Vector';\n\nfunction test_getIndexOf(loopCount: number) {\n  let vector = new Vector&lt;number&gt;();\n  for (let i = 0; i &lt; loopCount; i++) {\n    vector.add(i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    vector.getIndexOf(i);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutilvectorgetlastindexof","title":"@ohos.util.Vector.getLastIndexOf","text":"<pre><code>import Vector from '@ohos.util.Vector';\n\nfunction test_getLastIndexOf(loopCount: number) {\n  const vector = new Vector&lt;number&gt;();\n  for (let i = 0; i &lt; loopCount; i++) {\n    vector.add(i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    vector.getLastIndexOf(i);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n\ntest_getLastIndexOf(1000);\n</code></pre>"},{"location":"llm/#ohosutilvectorremovebyindex","title":"@ohos.util.Vector.removeByIndex","text":"<pre><code>import ohos.util.Vector from '@ohos.util.Vector';\n\nfunction test_removeByIndex(loopCount: number) {\n  let vector = new Vector();\n  for (let i = 0; i &lt; loopCount; i++) {\n    vector.add(i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    vector.removeByIndex(i);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n\ntest_removeByIndex(1000);\n```### @ohos.util.Vector.remove \n\n```typescript\nimport Vector from 'ohos.util.Vector';\n\nfunction test_remove(loopCount: number) {\n  let vector = new Vector&lt;number&gt;();\n  for (let i = 0; i &lt; loopCount; i++) {\n    vector.add(i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    vector.remove(i);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutilvectorremovebyrange","title":"@ohos.util.Vector.removeByRange","text":"<pre><code>import ohos.util.Vector from @ohos.util.Vector\n\nimport { expect } from 'chai';\n\ndescribe('Vector', () =&gt; {\n    describe('#removeByRange', () =&gt; {\n        let vector: Vector&lt;number&gt;;\n\n        beforeEach(() =&gt; {\n            vector = new Vector&lt;number&gt;();\n            vector.add(2);\n            vector.add(4);\n            vector.add(5);\n            vector.add(4);\n        });\n\n        it('should remove elements within the specified range', () =&gt; {\n            vector.removeByRange(2, 4);\n            expect(vector.size()).to.equal(1);\n            expect(vector.get(0)).to.equal(2);\n        });\n\n        it('should remove elements when fromIndex is equal to toIndex', () =&gt; {\n            vector.removeByRange(1, 1);\n            expect(vector.size()).to.equal(3);\n            expect(vector.contains(4)).to.be.true;\n        });\n\n        it('should remove elements when fromIndex is greater than toIndex', () =&gt; {\n            vector.removeByRange(3, 2);\n            expect(vector.size()).to.equal(4);\n            expect(vector.contains(5)).to.be.true;\n        });\n\n        it('should throw an error if fromIndex is out of range', () =&gt; {\n            expect(() =&gt; vector.removeByRange(-1, 3)).to.throw(RangeError);\n            expect(() =&gt; vector.removeByRange(5, 3)).to.throw(RangeError);\n        });\n\n        it('should throw an error if toIndex is out of range', () =&gt; {\n            expect(() =&gt; vector.removeByRange(0, 5)).to.throw(RangeError);\n            expect(() =&gt; vector.removeByRange(0, -1)).to.throw(RangeError);\n        });\n    });\n});\n</code></pre>"},{"location":"llm/#ohosutilvectorreplaceallelements","title":"@ohos.util.Vector.replaceAllElements","text":"<pre><code>import ohos.util.Vector from @ohos.util.Vector\n\nfunction test_replaceAllElements(loopCount: number) {\n  let vector = new Vector&lt;number&gt;();\n  for (let i = 0; i &lt; loopCount; i++) {\n    vector.add(i);\n  }\n\n  const startTime = new Date();\n  vector.replaceAllElements((value) =&gt; {\n    // \u7528\u6237\u64cd\u4f5c\u903b\u8f91\u6839\u636e\u5b9e\u9645\u573a\u666f\u8fdb\u884c\u6dfb\u52a0\u3002\n    return value * 2;\n  });\n  const endTime = new Date();\n\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutilvectorforeach","title":"@ohos.util.Vector.forEach","text":"<pre><code>import ohos.util.Vector from \"@ohos.util.Vector\";\n\nfunction test_forEach(loopCount: number) {\n  let vector = new Vector();\n  for (let i = 0; i &lt; loopCount; i++) {\n    vector.add(i);\n  }\n  const startTime = new Date();\n  vector.forEach((value, index) =&gt; {\n    console.log(\"value:\" + value, \"index:\" + index);\n  });\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!test_forEach: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutilvectorsort","title":"@ohos.util.Vector.sort","text":"<pre><code>import Vector from '@ohos.util.Vector';\n\nfunction test_sort(loopCount: number) {\n  let vector = new Vector&lt;number&gt;();\n  for (let i = 0; i &lt; loopCount; i++) {\n    vector.add(i);\n  }\n\n  const startTime = new Date();\n  vector.sort((a: number, b: number) =&gt; a - b);\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!test_sort: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutilvectorsubvector","title":"@ohos.util.Vector.subVector","text":"<pre><code>import Vector from \"@ohos.util.Vector\";\n\nfunction test_subVector(loopCount: number) {\n  let vector = new Vector&lt;number&gt;();\n  for (let i = 0; i &lt; loopCount; i++) {\n    vector.add(i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    let result = vector.subVector(i, loopCount);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n\ntest_subVector(10000);\n```### @ohos.util.Vector.clear \n\n```typescript\nimport ohos.util.Vector from '@ohos.util.Vector';\n\nfunction test_clear(loopCount: number) {\n  let vector = new Vector&lt;number&gt;();\n  for (let i = 0; i &lt; loopCount; i++) {\n    vector.add(i);\n  }\n  const startTime = new Date();\n  vector.clear();\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  console.log(`!${test_id}: ${executionTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutilvectorclone","title":"@ohos.util.Vector.clone","text":"<pre><code>import ohos.util.Vector from @ohos.util.Vector\n\nfunction test_clone(loopCount: number) {\n  let vector = new Vector();\n  for (let i = 0; i &lt; loopCount; i++) {\n    vector.add(i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    let clone = vector.clone();\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutilvectorgetcapacity","title":"@ohos.util.Vector.getCapacity","text":"<pre><code>import ohos.util.Vector from '@ohos.util.Vector';\n\nfunction test_getCapacity(loopCount: number) {\n  let vector = new Vector();\n  for (let i = 0; i &lt; loopCount; i++) {\n    vector.add(i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    vector.getCapacity();\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutilvectorconverttoarray","title":"@ohos.util.Vector.convertToArray","text":"<pre><code>function test_convertToArray(loopCount: number) {\n  let vector = new Vector();\n  for (let i = 0; i &lt; loopCount; i++) {\n    vector.add(i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    let result = vector.convertToArray();\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutilvectorisempty","title":"@ohos.util.Vector.isEmpty","text":"<pre><code>import Vector from \"@ohos.util.Vector\";\n\nfunction test_isEmpty() {\n  let vector = new Vector();\n  vector.add(2);\n  vector.add(4);\n  vector.add(5);\n  vector.add(4);\n\n  const startTime = new Date();\n  let result = vector.isEmpty();\n  const endTime = new Date();\n\n  const executionTime = endTime.getTime() - startTime.getTime();\n  console.log(`isEmpty Test: ${executionTime} ms`);\n}\n\ntest_isEmpty();\n</code></pre>"},{"location":"llm/#ohosutilvectorincreasecapacityto","title":"@ohos.util.Vector.increaseCapacityTo","text":"<pre><code>function test_increaseCapacityTo() {\n  const vector = new Vector();\n  vector.add(2);\n  vector.add(4);\n  vector.add(5);\n  vector.add(4);\n\n  const startTime1 = new Date();\n  vector.increaseCapacityTo(2);\n  const endTime1 = new Date();\n  const executionTime1 = endTime1.getTime() - startTime1.getTime();\n  const averageTime1 = executionTime1 / 1;\n  console.log(`!${test_id}: ${averageTime1} ms`);\n\n  const startTime2 = new Date();\n  vector.increaseCapacityTo(12);\n  const endTime2 = new Date();\n  const executionTime2 = endTime2.getTime() - startTime2.getTime();\n  const averageTime2 = executionTime2 / 1;\n  console.log(`!${test_id}: ${averageTime2} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutilvectortrimtocurrentlength","title":"@ohos.util.Vector.trimToCurrentLength","text":"<pre><code>import Vector from '@ohos.util.Vector';\n\nfunction test_trimToCurrentLength() {\n  let vector = new Vector();\n  vector.add(2);\n  vector.add(4);\n  vector.add(5);\n  vector.add(4);\n\n  const startTime = new Date();\n  vector.trimToCurrentLength();\n  const endTime = new Date();\n\n  const executionTime = endTime.getTime() - startTime.getTime();\n  console.log(`Executed trimToCurrentLength in ${executionTime} ms`);\n}\n\ntest_trimToCurrentLength();\n```### @ohos.util.Vector.toString \n\n```typescript\nfunction test_toString(loopCount: number) {\n  let vector = new Vector();\n  for (let i = 0; i &lt; loopCount; i++) {\n    vector.add(i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    vector.toString();\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutilvectorcopytoarray","title":"@ohos.util.Vector.copyToArray","text":"<pre><code>import ohos.util.Vector from @ohos.util.Vector\n\nfunction test_copyToArray(loopCount: number) {\n  let vector = new Vector&lt;number&gt;();\n  for (let i = 0; i &lt; loopCount; i++) {\n    vector.add(i);\n  }\n  let array = new Array&lt;number&gt;(loopCount);\n  const startTime = new Date();\n  vector.copyToArray(array);\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutilvectorgetfirstelement","title":"@ohos.util.Vector.getFirstElement","text":"<pre><code>import ohos.util.Vector from @ohos.util.Vector\n</code></pre>"},{"location":"llm/#ohosutilvectorgetlastelement","title":"@ohos.util.Vector.getLastElement","text":"<pre><code>import ohos.util.Vector from @ohos.util.Vector\n\nfunction test_getLastElement(loopCount: number) {\n  let vector = new Vector&lt;number&gt;();\n  for (let i = 0; i &lt; loopCount; i++) {\n    vector.add(i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    vector.getLastElement();\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutilvectorgetlastindexfrom","title":"@ohos.util.Vector.getLastIndexFrom","text":"<pre><code>import ohos.util.Vector from @ohos.util.Vector\n\nfunction test_getLastIndexFrom(loopCount: number) {\n  let vector = new Vector();\n  for (let i = 0; i &lt; loopCount; i++) {\n    vector.add(i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    vector.getLastIndexFrom(i, 0);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutilvectorgetindexfrom","title":"@ohos.util.Vector.getIndexFrom","text":"<pre><code>import ohos.util.Vector from \"@ohos.util.Vector\";\n\nfunction test_getIndexFrom(loopCount: number) {\n  let vector = new Vector&lt;number&gt;();\n  for (let i = 0; i &lt; loopCount; i++) {\n    vector.add(i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    vector.getIndexFrom(i, i - 1);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutilvectorsetlength","title":"@ohos.util.Vector.setLength","text":"<pre><code>import Vector from '@ohos.util.Vector';\n\nfunction test_setLength(loopCount: number) {\n  let vector = new Vector&lt;number&gt;();\n  for (let i = 0; i &lt; loopCount; i++) {\n    vector.add(i);\n  }\n\n  const startTime = new Date();\n  vector.setLength(loopCount * 2);\n  const endTime = new Date();\n\n  const executionTime = endTime.getTime() - startTime.getTime();\n  console.log(`!${test_id}: ${executionTime} ms`);\n}\n\ntest_setLength(100);\n</code></pre>"},{"location":"llm/#ohosutilvectorget","title":"@ohos.util.Vector.get","text":"<pre><code>import Vector from 'ohos.util.Vector';\n\nfunction test_get(loopCount: number) {\n  let vector = new Vector();\n  for (let i = 0; i &lt; loopCount; i++) {\n    vector.add(i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    vector.get(i);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n\ntest_get(1000);\n</code></pre>"},{"location":"llm/#ohosutilvectorset","title":"@ohos.util.Vector.set","text":"<pre><code>import Vector from 'ohos.util.Vector';\n\nfunction test_set(loopCount: number) {\n  let vector = new Vector&lt;number&gt;();\n  for (let i = 0; i &lt; loopCount; i++) {\n    vector.add(i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    vector.set(i, i + 1);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n\ntest_set(100);\n</code></pre>"},{"location":"llm/#ohosutilplainarrayconstructor","title":"@ohos.util.PlainArray.constructor","text":"<pre><code>import PlainArray from '@ohos.util.PlainArray';\n\nfunction test_constructor() {\n  const startTime = new Date();\n  const plainArray = new PlainArray();\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  console.log(`!test_constructor: ${executionTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutilplainarrayisempty","title":"@ohos.util.PlainArray.isEmpty","text":"<pre><code>import PlainArray from 'ohos.util.PlainArray';\n\nfunction test_isEmpty() {\n  const plainArray = new PlainArray();\n  const startTime = new Date();\n  const result = plainArray.isEmpty();\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  console.log(`isEmpty: ${result}`);\n  console.log(`Execution time: ${executionTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutilplainarrayhas","title":"@ohos.util.PlainArray.has","text":"<p><pre><code>import ohos.util.PlainArray from @ohos.util.PlainArray;\n\nfunction test_has(loopCount: number) {\n  let plainArray = new PlainArray();\n  for (let i = 0; i &lt; loopCount; i++) {\n    plainArray.add(i, \"squirrel\");\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    plainArray.has(i);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n\ntest_has(1000);\n```### @ohos.util.PlainArray.get \n\n```typescript\nCode:\n</code></pre> import PlainArray from '@ohos.util.PlainArray';</p> <p>function test_get(loopCount: number) {   let plainArray = new PlainArray();   for (let i = 0; i &lt; loopCount; i++) {     plainArray.add(i, <code>value${i}</code>);   }   const startTime = new Date();   for (let i = 0; i &lt; loopCount; i++) {     plainArray.get(i);   }   const endTime = new Date();   const executionTime = endTime.getTime() - startTime.getTime();   const averageTime = executionTime / loopCount;   console.log(<code>!${test_id}: ${averageTime} ms</code>); } ```### @ohos.util.PlainArray.getIndexOfKey </p> <pre><code>function test_getIndexOfKey(loopCount: number) {\n  let plainArray = new PlainArray();\n  for (let i = 0; i &lt; loopCount; i++) {\n    plainArray.add(i, i.toString());\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    plainArray.getIndexOfKey(i);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutilplainarraygetindexofvalue","title":"@ohos.util.PlainArray.getIndexOfValue","text":"<pre><code>import PlainArray from '@ohos.util.PlainArray';\n\nfunction test_getIndexOfValue(loopCount: number): void {\n  let plainArray = new PlainArray&lt;number&gt;();\n  for (let i = 0; i &lt; loopCount; i++) {\n    plainArray.add(i, i.toString());\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    plainArray.getIndexOfValue(i.toString());\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutilplainarraygetkeyat","title":"@ohos.util.PlainArray.getKeyAt","text":"<pre><code>import ohos.util.PlainArray from \"@ohos.util.PlainArray\";\n\nfunction test_getKeyAt(loopCount: number) {\n  let plainArray = new PlainArray&lt;number, string&gt;();\n  plainArray.add(1, \"squirrel\");\n  plainArray.add(2, \"sparrow\");\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    let result = plainArray.getKeyAt(1);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutilplainarraygetvalueat","title":"@ohos.util.PlainArray.getValueAt","text":"<pre><code>function test_getValueAt(loopCount: number) {\n  let plainArray = new PlainArray();\n  for (let i = 0; i &lt; loopCount; i++) {\n    plainArray.add(i, i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    let result = plainArray.getValueAt(i);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutilplainarrayclone","title":"@ohos.util.PlainArray.clone","text":"<pre><code>import PlainArray from '@ohos.util.PlainArray';\n\nfunction test_clone() {\n  let plainArray = new PlainArray();\n  plainArray.add(1, \"squirrel\");\n  plainArray.add(2, \"sparrow\");\n\n  const startTime = new Date();\n\n  let newPlainArray = plainArray.clone();\n\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  console.log(`Clone execution time: ${executionTime} ms`);\n}\n// Example usage\ntest_clone();\n</code></pre>"},{"location":"llm/#ohosutilplainarrayadd","title":"@ohos.util.PlainArray.add","text":"<pre><code>import PlainArray from '@ohos.util.PlainArray';\n\nfunction test_add(loopCount: number) {\n  const plainArray = new PlainArray();\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    plainArray.add(i, \"value\");\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutilplainarrayremove","title":"@ohos.util.PlainArray.remove","text":"<pre><code>import { PlainArray } from \"@ohos.util\";\n\nfunction test_remove(loopCount: number) {\n  let plainArray = new PlainArray&lt;number&gt;();\n  for (let i = 0; i &lt; loopCount; i++) {\n    plainArray.add(i, i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    plainArray.remove(i);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutilplainarrayremoveat","title":"@ohos.util.PlainArray.removeAt","text":"<pre><code>import PlainArray from '@ohos.util.PlainArray';\n\nfunction test_removeAt(loopCount: number) {\n  let plainArray = new PlainArray();\n  for (let i = 0; i &lt; loopCount; i++) {\n    plainArray.add(i, \"element\" + i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    plainArray.removeAt(i);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutilplainarrayremoverangefrom","title":"@ohos.util.PlainArray.removeRangeFrom","text":"<pre><code>import PlainArray from '@ohos.util.PlainArray';\n\nfunction test_removeRangeFrom(loopCount: number) {\n  let plainArray = new PlainArray&lt;number&gt;();\n  for (let i = 0; i &lt; loopCount; i++) {\n    plainArray.add(i);\n  }\n  const startTime = new Date();\n  plainArray.removeRangeFrom(0, loopCount);\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutilplainarraysetvalueat","title":"@ohos.util.PlainArray.setValueAt","text":"<pre><code>import PlainArray from '@ohos.util.PlainArray';\n\nfunction test_setValueAt(loopCount: number) {\n  const plainArray = new PlainArray&lt;number&gt;();\n  for (let i = 0; i &lt; loopCount; i++) {\n    plainArray.add(i, i.toString());\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    plainArray.setValueAt(i, i.toString() + ' updated');\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!test_setValueAt: ${averageTime} ms`);\n}\n```### @ohos.util.PlainArray.toString \n\n```typescript\nimport PlainArray from '@ohos.util.PlainArray';\n\nfunction test_toString(loopCount: number) {\n  let plainArray = new PlainArray();\n  for (let i = 0; i &lt; loopCount; i++) {\n    plainArray.add(i, 'value' + i);\n  }\n  const startTime = new Date();\n  plainArray.toString();\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  console.log(`!test_toString: ${executionTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutilplainarrayclear","title":"@ohos.util.PlainArray.clear","text":"<pre><code>import PlainArray from '@ohos.util.PlainArray';\n\nfunction test_clear(loopCount: number) {\n  const plainArray = new PlainArray&lt;number&gt;();\n  for (let i = 0; i &lt; loopCount; i++) {\n    plainArray.add(i);\n  }\n  const startTime = new Date();\n  plainArray.clear();\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  console.log(`clear: ${executionTime} ms`);\n}\n\ntest_clear(1000);\n```### @ohos.util.PlainArray.forEach \n\n```typescript\n\u751f\u6210\u7684\u6d4b\u8bd5\u51fd\u6570\u5982\u4e0b\u6240\u793a\uff1a\n\n```typescript\nfunction test_forEach(loopCount: number) {\n  let plainArray = new PlainArray();\n  for (let i = 0; i &lt; loopCount; i++) {\n    plainArray.add(i, \"value: \" + i);\n  }\n  const startTime = new Date();\n  plainArray.forEach((value, index) =&gt; {\n    console.log(\"value:\" + value, \"index:\" + index);\n  });\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  console.log(`!${test_id}: ${executionTime} ms`);\n}\n```### @ohos.util.TreeMap.constructor \n\n```typescript\nimport TreeMap from 'ohos.util.TreeMap';\n\nfunction test_constructor() {\n  const startTime = new Date();\n  const treeMap = new TreeMap();\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  console.log(`!${test_id}: ${executionTime} ms`);\n}\n```### @ohos.util.TreeMap.isEmpty \n\n```typescript\nimport { TreeMap } from \"ohos.util.TreeMap\";\n\nfunction test_isEmpty() {\n  const treeMap = new TreeMap();\n  const startTime = new Date();\n  treeMap.isEmpty();\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  console.log(`isEmpty execution time: ${executionTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutiltreemaphaskey","title":"@ohos.util.TreeMap.hasKey","text":"<pre><code>import TreeMap from \"@ohos.util.TreeMap\";\n\nfunction test_hasKey() {\n  let treeMap = new TreeMap();\n  let startTime = new Date();\n\n  // Test with an empty TreeMap\n  let result = treeMap.hasKey(\"squirrel\");\n\n  // Test after adding a key-value pair\n  treeMap.set(\"squirrel\", 123);\n  let result1 = treeMap.hasKey(\"squirrel\");\n\n  let endTime = new Date();\n  let executionTime = endTime.getTime() - startTime.getTime();\n\n  console.log(`test_hasKey: ${executionTime} ms`);\n}\n```### @ohos.util.TreeMap.hasValue \n\n```typescript\nimport TreeMap from '@ohos.util.TreeMap';\n\nfunction test_hasValue(loopCount: number) {\n  let treeMap = new TreeMap();\n  for (let i = 0; i &lt; loopCount; i++) {\n    treeMap.set(`key${i}`, `value${i}`);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    treeMap.hasValue(`value${i}`);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutiltreemapget","title":"@ohos.util.TreeMap.get","text":"<pre><code>\u4ee3\u7801\u793a\u4f8b\uff1a \n\n```typescript\nimport TreeMap from 'ohos.util.TreeMap';\n\nfunction test_get(loopCount: number) {\n  let treeMap = new TreeMap&lt;string, number&gt;();\n  for (let i = 0; i &lt; loopCount; i++) {\n    treeMap.set(`key${i}`, i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    treeMap.get(`key${i}`);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n```### @ohos.util.TreeMap.getFirstKey \n\n```typescript\nimport TreeMap from '@ohos.util.TreeMap';\n\nfunction test_getFirstKey() {\n  let treeMap = new TreeMap();\n  treeMap.set(\"squirrel\", 123);\n  treeMap.set(\"sparrow\", 356);\n\n  const startTime = new Date();\n  let result = treeMap.getFirstKey();\n  const endTime = new Date();\n\n  console.log(`The first key in the TreeMap is ${result}`);\n  console.log(`Execution time: ${endTime.getTime() - startTime.getTime()} ms`);\n}\n\ntest_getFirstKey();\n</code></pre>"},{"location":"llm/#ohosutiltreemapgetlastkey","title":"@ohos.util.TreeMap.getLastKey","text":"<pre><code>import TreeMap from \"@ohos.util.TreeMap\";\n\nfunction test_getLastKey() {\n  let treeMap = new TreeMap();\n  treeMap.set(\"squirrel\", 123);\n  treeMap.set(\"sparrow\", 356);\n\n  const startTime = new Date();\n  let result = treeMap.getLastKey();\n  const endTime = new Date();\n\n  const executionTime = endTime.getTime() - startTime.getTime();\n\n  console.log(`Execution Time: ${executionTime} ms`);\n  console.log(`Last Key: ${result}`);\n}\n```### @ohos.util.TreeMap.setAll \n\n```typescript\nimport { TreeMap } from '@ohos.util.TreeMap';\n\nfunction test_setAll() {\n  let treeMap = new TreeMap&lt;number, string&gt;();\n  treeMap.set(1, \"apple\");\n  treeMap.set(2, \"banana\");\n\n  let map = new TreeMap&lt;number, string&gt;();\n  map.set(3, \"orange\");\n  map.setAll(treeMap);\n\n  map.forEach((value, key) =&gt; {\n    console.log(\"value: \" + value, \"key: \" + key);\n  });\n}\n\ntest_setAll();\n</code></pre>"},{"location":"llm/#ohosutiltreemapset","title":"@ohos.util.TreeMap.set","text":"<pre><code>import TreeMap from '@ohos.util.TreeMap';\n\ntest('test_set', () =&gt; {\n  let treeMap = new TreeMap&lt;number&gt;();\n  const startTime = new Date();\n\n  // Add data to the tree map\n  // loopCount represents the number of data to add\n  for (let i = 0; i &lt; loopCount; i++) {\n    treeMap.set(i, i.toString());\n  }\n\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n\n  console.log(`Average time for set operation: ${averageTime} ms`);\n});\n</code></pre>"},{"location":"llm/#ohosutiltreemapremove","title":"@ohos.util.TreeMap.remove","text":"<pre><code>import TreeMap from '@ohos.util.TreeMap';\n\nfunction test_remove(loopCount) {\n  let treeMap = new TreeMap();\n  for (let i = 0; i &lt; loopCount; i++) {\n    treeMap.set(i.toString(), i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    treeMap.remove(i.toString());\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutiltreemapgetlowerkey","title":"@ohos.util.TreeMap.getLowerKey","text":"<pre><code>import TreeMap from '@ohos.util.TreeMap';\n\nfunction test_getLowerKey(loopCount: number) {\n  let treeMap = new TreeMap();\n  treeMap.set(\"squirrel\", 123);\n  treeMap.set(\"sparrow\", 356);\n  treeMap.set(\"gander\", 356);\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    treeMap.getLowerKey(\"sparrow\");\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`API execution time: ${averageTime} ms`);\n}\n```### @ohos.util.TreeMap.getHigherKey \n\n```typescript\nimport ohos.util.TreeMap from '@ohos.util.TreeMap';\n\nfunction test_getHigherKey() {\n  let treeMap = new TreeMap();\n  treeMap.set(\"squirrel\", 123);\n  treeMap.set(\"sparrow\", 356);\n  treeMap.set(\"gander\", 356);\n\n  const startTime = new Date();\n  let result = treeMap.getHigherKey(\"sparrow\"); \n  const endTime = new Date();\n\n  const executionTime = endTime.getTime() - startTime.getTime();\n  console.log(`getHigherKey test: ${executionTime} ms`);\n}\n```### @ohos.util.TreeMap.replace \n\n```typescript\nimport TreeMap from '@ohos.util.TreeMap';\n\nfunction test_replace(loopCount: number) {\n  let treeMap = new TreeMap&lt;number, string&gt;();\n  for (let i = 0; i &lt; loopCount; i++) {\n    treeMap.set(i, `value_${i}`);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    treeMap.replace(i, `new_value_${i}`);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutiltreemapclear","title":"@ohos.util.TreeMap.clear","text":"<pre><code>import TreeMap from \"@ohos.util.TreeMap\";\n\nfunction test_clear(loopCount: number) {\n  let treeMap = new TreeMap&lt;string, number&gt;();\n  for (let i = 0; i &lt; loopCount; i++) {\n    treeMap.set(\"key\" + i, i);\n  }\n  const startTime = new Date();\n  treeMap.clear();\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  console.log(`!${test_id}: ${executionTime} ms`);\n}\n```### @ohos.util.TreeMap.keys \n\n```typescript\nimport ohos.utils.TreeMap from \"@ohos.utils.TreeMap\";\n\nfunction test_keys(loopCount: number) {\n  let treeMap = new TreeMap();\n  for (let i = 0; i &lt; loopCount; i++) {\n    treeMap.set(`key${i}`, `value${i}`);\n  }\n  const startTime = new Date();\n  const iter = treeMap.keys();\n  let temp = iter.next().value;\n  while (temp !== undefined) {\n    console.log(\"value:\" + temp);\n    temp = iter.next().value;\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n\ntest_keys(10);\n```### @ohos.util.TreeMap.values \n\n```typescript\nfunction test_values(loopCount: number) {\n  let treeMap = new TreeMap&lt;string, number&gt;();\n  treeMap.set(\"squirrel\", 123);\n  treeMap.set(\"sparrow\", 356);\n\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    let iter = treeMap.values();\n    let temp = iter.next().value;\n    while (temp !== undefined) {\n      temp = iter.next().value;\n    }\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutiltreemapforeach","title":"@ohos.util.TreeMap.forEach","text":"<pre><code>import ohos.util.TreeMap from '@ohos.util.TreeMap';\n\nfunction test_forEach() {\n  let treeMap = new TreeMap();\n  treeMap.set(\"sparrow\", 123);\n  treeMap.set(\"gull\", 357);\n\n  const startTime = new Date();\n  treeMap.forEach((value, key) =&gt; {\n    console.log(\"value:\" + value, \"key:\" + key);\n  });\n  const endTime = new Date();\n\n  const executionTime = endTime.getTime() - startTime.getTime();\n  console.log(`forEach execution time: ${executionTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutiltreemapentries","title":"@ohos.util.TreeMap.entries","text":"<pre><code>import TreeMap from '@ohos.util.TreeMap';\n\nfunction test_entries() {\n  let treeMap = new TreeMap();\n  treeMap.set(\"squirrel\", 123);\n  treeMap.set(\"sparrow\", 356);\n  let iter = treeMap.entries();\n  let temp = iter.next().value;\n  while(temp !== undefined) {\n    console.log(\"key:\" + temp[0]);\n    console.log(\"value:\" + temp[1]);\n    temp = iter.next().value;\n  }\n}\n\ntest_entries();\n</code></pre>"},{"location":"llm/#ohosutiltreesetconstructor","title":"@ohos.util.TreeSet.constructor","text":"<pre><code>import ohos.util.TreeSet from '@ohos.util.TreeSet';\n\nfunction test_constructor() {\n  const startTime = new Date();\n  let treeSet = new TreeSet();\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  console.log(`!test_constructor: ${executionTime} ms`);\n}\n```### @ohos.util.TreeSet.isEmpty \n\n```typescript\nimport ohos.util.TreeSet from '@ohos.util.TreeSet';\n\nfunction test_isEmpty() {\n  const treeSet = new TreeSet();\n  treeSet.add(1);\n  const startTime = new Date();\n  const result = treeSet.isEmpty();\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  console.log(`Test result: ${result}`);\n  console.log(`Execution time: ${executionTime} ms`);\n}\n\ntest_isEmpty();\n```### @ohos.util.TreeSet.has \n\n```typescript\nimport TreeSet from '@ohos.util.TreeSet';\n\nfunction test_has(loopCount: number) {\n  let set = new TreeSet&lt;number&gt;();\n  for (let i = 0; i &lt; loopCount; i++) {\n    set.add(i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    set.has(i);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutiltreesetgetfirstvalue","title":"@ohos.util.TreeSet.getFirstValue","text":"<pre><code>import TreeSet from '@ohos.util.TreeSet';\n\nfunction test_getFirstValue(loopCount: number) {\n  let treeSet = new TreeSet&lt;string&gt;();\n  treeSet.add(\"squirrel\");\n  treeSet.add(\"sparrow\");\n\n  const startTime = new Date();\n\n  for (let i = 0; i &lt; loopCount; i++) {\n    treeSet.getFirstValue();\n  }\n\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutiltreesetgetlastvalue","title":"@ohos.util.TreeSet.getLastValue","text":"<pre><code>import ohos.util.TreeSet from @ohos.util.TreeSet;\n\nfunction test_getLastValue(loopCount: number) {\n  let treeSet = new TreeSet&lt;string&gt;();\n\n  for (let i = 0; i &lt; loopCount; i++) {\n    treeSet.add(`element${i}`);\n  }\n\n  const startTime = new Date();\n  const result = treeSet.getLastValue();\n  const endTime = new Date();\n\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n\n  console.log(`getLastValue Test: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutiltreesetadd","title":"@ohos.util.TreeSet.add","text":"<pre><code>import ohos.util.TreeSet from @ohos.util.TreeSet;\n\nfunction test_add(loopCount: number) {\n  let set = new TreeSet&lt;number&gt;();\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    set.add(i);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutiltreesetremove","title":"@ohos.util.TreeSet.remove","text":"<pre><code>import ohos.util.TreeSet from @ohos.util.TreeSet;\n\nfunction test_remove(loopCount: number) {\n  let treeSet = new TreeSet();\n  for (let i = 0; i &lt; loopCount; i++) {\n    treeSet.add(i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    treeSet.remove(i);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n\ntest_remove(1000);\n</code></pre>"},{"location":"llm/#ohosutiltreesetgetlowervalue","title":"@ohos.util.TreeSet.getLowerValue","text":"<pre><code>import ohos.util.TreeSet from '@ohos.util.TreeSet';\n\nfunction test_getLowerValue() {\n  let treeSet = new TreeSet();\n  treeSet.add(\"squirrel\");\n  treeSet.add(\"sparrow\");\n  treeSet.add(\"gander\");\n\n  const startTime = new Date();\n  let result = treeSet.getLowerValue(\"sparrow\");\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n\n  console.log(`Execution Time: ${executionTime} ms`);\n  console.log(`Result: ${result}`);\n}\n\ntest_getLowerValue();\n</code></pre>"},{"location":"llm/#ohosutiltreesetgethighervalue","title":"@ohos.util.TreeSet.getHigherValue","text":"<pre><code>import TreeSet from '@ohos.util.TreeSet';\n\nfunction test_getHigherValue(loopCount: number) {\n  let treeSet = new TreeSet();\n  treeSet.add(\"squirrel\");\n  treeSet.add(\"sparrow\");\n  treeSet.add(\"gander\");\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    treeSet.getHigherValue(\"sparrow\");\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutiltreesetpopfirst","title":"@ohos.util.TreeSet.popFirst","text":"<pre><code>import TreeSet from \"ohos.util.TreeSet\";\n\nfunction test_treeSet_popFirst(loopCount: number) {\n  let treeSet = new TreeSet&lt;string&gt;();\n  for (let i = 0; i &lt; loopCount; i++) {\n    treeSet.add(`element_${i}`);\n  }\n\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    treeSet.popFirst();\n  }\n  const endTime = new Date();\n\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutiltreesetpoplast","title":"@ohos.util.TreeSet.popLast","text":"<pre><code>import TreeSet from '@ohos.util.TreeSet';\n\nfunction test_popLast() {\n  let treeSet = new TreeSet();\n  treeSet.add(\"squirrel\");\n  treeSet.add(\"sparrow\");\n\n  const startTime = new Date();\n  let result = treeSet.popLast();\n  const endTime = new Date();\n\n  const executionTime = endTime.getTime() - startTime.getTime();\n  console.log(`Execution time: ${executionTime} ms`);\n  console.log(`Result: ${result}`);\n}\n\ntest_popLast();\n</code></pre>"},{"location":"llm/#ohosutiltreesetclear","title":"@ohos.util.TreeSet.clear","text":"<pre><code>function test_clear(loopCount: number) {\n  let treeSet = new TreeSet();\n  for (let i = 0; i &lt; loopCount; i++) {\n    treeSet.add(i.toString());\n  }\n  const startTime = new Date();\n  treeSet.clear();\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  console.log(`!${test_id}: ${executionTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutiltreesetvalues","title":"@ohos.util.TreeSet.values","text":"<pre><code>import ohos.util.TreeSet from '@ohos.util.TreeSet';\n\nfunction test_values() {\n  let treeSet = new TreeSet();\n  treeSet.add(\"squirrel\");\n  treeSet.add(\"sparrow\");\n  const startTime = new Date();\n  let iter = treeSet.values();\n  let temp = iter.next().value;\n  while (temp != undefined) {\n    console.log(\"value:\" + temp);\n    temp = iter.next().value;\n  }\n  const endTime= new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  console.log(`Execution time: ${executionTime} ms`);\n}\n```### @ohos.util.TreeSet.forEach \n\n```typescript\nimport ohos.util.TreeSet from @ohos.util.TreeSet;\n\nfunction test_forEach(loopCount: number) {\n  let treeSet = new TreeSet&lt;string&gt;();\n  treeSet.add(\"sparrow\");\n  treeSet.add(\"gull\");\n\n  const startTime = new Date();\n\n  treeSet.forEach((value, key) =&gt; {\n    console.log(\"value:\" + value, \"key:\" + key);\n  });\n\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutiltreesetentries","title":"@ohos.util.TreeSet.entries","text":"<pre><code>import ohos.util.TreeSet from @ohos.util.TreeSet\n\nfunction test_entries(loopCount: number) {\n  let treeSet = new TreeSet&lt;string&gt;();\n  treeSet.add(\"squirrel\");\n  treeSet.add(\"sparrow\");\n  let iter = treeSet.entries();\n  let temp = iter.next().value;\n  const startTime = new Date();\n  while(temp !== undefined) {\n    console.log(\"key:\" + temp[0]);\n    console.log(\"value:\" + temp[1]);\n    temp = iter.next().value;\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutilarraylistconstructor","title":"@ohos.util.ArrayList.constructor","text":"<pre><code>function test_constructor() {\n  const startTime = new Date();\n  let arrayList = new ArrayList();\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  console.log(`!test_constructor: ${executionTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutilarraylistadd","title":"@ohos.util.ArrayList.add","text":"<pre><code>import { describe, it } from 'mocha';\nimport { expect } from 'chai';\nimport ArrayList from 'ohos.util.ArrayList';\n\ndescribe('ArrayList add API', () =&gt; {\n  it('should insert elements at the end of the ArrayList', () =&gt; {\n    const arrayList = new ArrayList();\n    const result1 = arrayList.add(\"a\");\n    const result2 = arrayList.add(1);\n    const result3 = arrayList.add([1, 2, 3]);\n    const result4 = arrayList.add({ name: \"Dylon\", age: \"13\" });\n    const result5 = arrayList.add(false);\n\n    expect(result1).to.equal(true);\n    expect(result2).to.equal(true);\n    expect(result3).to.equal(true);\n    expect(result4).to.equal(true);\n    expect(result5).to.equal(true);\n    expect(arrayList.size()).to.equal(5);\n  });\n});\n</code></pre>"},{"location":"llm/#ohosutilarraylistinsert","title":"@ohos.util.ArrayList.insert","text":"<pre><code>function test_insert(loopCount: number) {\n  let arrayList = new ArrayList();\n  for (let i = 0; i &lt; loopCount; i++) {\n    arrayList.insert(i, i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    arrayList.insert(i, i);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutilarraylisthas","title":"@ohos.util.ArrayList.has","text":"<pre><code>import ArrayList from \"@ohos.util.ArrayList\";\n\nfunction test_has(loopCount: number) {\n  let arrayList = new ArrayList&lt;string&gt;();\n\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    arrayList.has(\"squirrel\");\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n\ntest_has(1000);\n</code></pre>"},{"location":"llm/#ohosutilarraylistgetindexof","title":"@ohos.util.ArrayList.getIndexOf","text":"<pre><code>import ohos.util.ArrayList from @ohos.util.ArrayList\n\nfunction test_getIndexOf(loopCount: number) {\n  let arrayList = new ArrayList&lt;number&gt;();\n  for (let i = 0; i &lt; loopCount; i++) {\n    arrayList.add(i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    arrayList.getIndexOf(i);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutilarraylistgetlastindexof","title":"@ohos.util.ArrayList.getLastIndexOf","text":"<pre><code>import ohos.data.ArrayList from '@ohos.util.ArrayList';\n\nfunction test_getLastIndexOf(loopCount: number) {\n  let arrayList = new ArrayList&lt;number&gt;();\n  for (let i = 0; i &lt; loopCount; i++) {\n    arrayList.add(i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    arrayList.getLastIndexOf(i);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!test_getLastIndexOf: ${averageTime} ms`);\n}\n```### @ohos.util.ArrayList.removeByIndex \n\n```typescript\nimport ArrayList from '@ohos.util.ArrayList';\n\nfunction test_removeByIndex(loopCount: number) {\n  const arrayList = new ArrayList&lt;number&gt;();\n  for (let i = 0; i &lt; loopCount; i++) {\n    arrayList.add(i);\n  }\n\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    arrayList.removeByIndex(i);\n  }\n  const endTime = new Date();\n\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutilarraylistremove","title":"@ohos.util.ArrayList.remove","text":"<pre><code>import ohos.util.ArrayList from '@ohos.util.ArrayList';\n\nfunction test_remove(loopCount: number) {\n  let arrayList = new ArrayList&lt;number&gt;();\n  for (let i = 0; i &lt; loopCount; i++) {\n    arrayList.add(i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    arrayList.remove(i);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n\ntest_remove(1000);\n</code></pre>"},{"location":"llm/#ohosutilarraylistremovebyrange","title":"@ohos.util.ArrayList.removeByRange","text":"<pre><code>import ArrayList from '@ohos.util.ArrayList';\n\nfunction test_removeByRange(loopCount: number) {\n  let arrayList = new ArrayList&lt;number&gt;();\n  for (let i = 0; i &lt; loopCount; i++) {\n    arrayList.add(i);\n  }\n  const startTime = new Date();\n  arrayList.removeByRange(2, 4);\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutilarraylistreplaceallelements","title":"@ohos.util.ArrayList.replaceAllElements","text":"<pre><code>\u751f\u6210\u7684\u6d4b\u8bd5\u7528\u4f8b\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```typescript\nimport ohos.util.ArrayList from '@ohos.util.ArrayList';\n\nfunction test_replaceAllElements() {\n  let arrayList = new ArrayList&lt;number&gt;();\n  arrayList.add(2);\n  arrayList.add(4);\n  arrayList.add(5);\n  arrayList.add(4);\n\n  const startTime = new Date();\n  arrayList.replaceAllElements((value) =&gt; {\n    // \u7528\u6237\u64cd\u4f5c\u903b\u8f91\u6839\u636e\u5b9e\u9645\u573a\u666f\u8fdb\u884c\u6dfb\u52a0\u3002\n    return value;\n  });\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  console.log(`replace all elements: ${executionTime} ms`);\n}\n```### @ohos.util.ArrayList.forEach \n\n```typescript\nimport ArrayList from '@ohos.util.ArrayList';\nimport { performance } from 'perf_hooks';\n\nfunction test_forEach(loopCount: number) {\n  let arrayList = new ArrayList();\n  for (let i = 0; i &lt; loopCount; i++) {\n    arrayList.add(i);\n  }\n\n  const startTime = performance.now();\n\n  arrayList.forEach((value, index) =&gt; {\n    // do something with value and index\n  });\n\n  const endTime = performance.now();\n  const executionTime = endTime - startTime;\n\n  console.log(`!${test_id}: ${executionTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutilarraylistsort","title":"@ohos.util.ArrayList.sort","text":"<pre><code>function test_sort(loopCount: number) {\n  let arrayList = new ArrayList&lt;number&gt;();\n  for (let i = 0; i &lt; loopCount; i++) {\n    arrayList.add(Math.floor(Math.random() * loopCount));\n  }\n\n  const startTime = new Date();\n  arrayList.sort();\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  console.log(`Sort ArrayList: ${executionTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutilarraylistsubarraylist","title":"@ohos.util.ArrayList.subArrayList","text":"<pre><code>import ohos.util.ArrayList from '@ohos.util.ArrayList';\n\nfunction test_subArrayList() {\n  let arrayList = new ArrayList();\n  arrayList.add(2);\n  arrayList.add(4);\n  arrayList.add(5);\n  arrayList.add(4);\n  const startTime = new Date();\n  let result1 = arrayList.subArrayList(2, 4);\n  let result2 = arrayList.subArrayList(4, 3);\n  let result3 = arrayList.subArrayList(2, 6);\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  console.log(`Execution time: ${executionTime} ms`);\n}\n\ntest_subArrayList();\n</code></pre>"},{"location":"llm/#ohosutilarraylistclear","title":"@ohos.util.ArrayList.clear","text":"<pre><code>import ohos.util.ArrayList from @ohos.util.ArrayList\n\nfunction test_clear(loopCount: number) {\n  let arrayList = new ArrayList&lt;number&gt;();\n  for (let i = 0; i &lt; loopCount; i++) {\n    arrayList.add(i);\n  }\n  const startTime = new Date();\n  arrayList.clear();\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutilarraylistclone","title":"@ohos.util.ArrayList.clone","text":"<pre><code>import ArrayList from 'ohos.util.ArrayList';\n\nfunction test_clone() {\n  let arrayList = new ArrayList&lt;number&gt;();\n  arrayList.add(2);\n     arrayList.add(4);\n     arrayList.add(5);\n     arrayList.add(4);\n\n     const startTime = new Date();\n     let cloneArrayList = arrayList.clone();\n     cloneArrayList.add(6);\n     const endTime = new Date();\n\n     const executionTime = endTime.getTime() - startTime.getTime();\n     console.log(`cloneArrayList: ${cloneArrayList.toString()}`);\n     console.log(`ArrayList: ${arrayList.toString()}`);\n     console.log(`Execution time: ${executionTime} ms`);\n}\n\ntest_clone();\n</code></pre>"},{"location":"llm/#ohosutilarraylistgetcapacity","title":"@ohos.util.ArrayList.getCapacity","text":"<pre><code>import ArrayList from \"@ohos.util.ArrayList\";\n\nfunction test_getCapacity() {\n  let arrayList = new ArrayList();\n  arrayList.add(2);\n  arrayList.add(4);\n  arrayList.add(5);\n  arrayList.add(4);\n  const startTime = new Date();\n  arrayList.getCapacity();\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  console.log(`getCapacity: ${executionTime} ms`);\n}\n\ntest_getCapacity();\n```### @ohos.util.ArrayList.convertToArray \n\n```typescript\nimport ArrayList from 'ohos.util.ArrayList';\n\nfunction test_convertToArray(loopCount: number) {\n  const arrayList = new ArrayList&lt;number&gt;();\n  for (let i = 0; i &lt; loopCount; i++) {\n    arrayList.add(i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    const result = arrayList.convertToArray();\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!test_convertToArray: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutilarraylistisempty","title":"@ohos.util.ArrayList.isEmpty","text":"<pre><code>import ohos.util.ArrayList from @ohos.util.ArrayList\n\nfunction test_isEmpty() {\n  let arrayList = new ArrayList();\n  arrayList.add(2);\n  arrayList.add(4);\n  arrayList.add(5);\n  arrayList.add(4);\n\n  const startTime = new Date();\n  const result = arrayList.isEmpty();\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n\n  console.log(`isEmpty: ${result}`);\n  console.log(`Execution Time: ${executionTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutilarraylistincreasecapacityto","title":"@ohos.util.ArrayList.increaseCapacityTo","text":"<pre><code>import ohos.util.ArrayList from '@ohos.util.ArrayList';\n\nfunction test_increaseCapacityTo() {\n  let arrayList = new ArrayList();\n  arrayList.add(2);\n  arrayList.add(4);\n  arrayList.add(5);\n  arrayList.add(4);\n\n  const startTime = new Date();\n\n  arrayList.increaseCapacityTo(2);\n\n  const endTime = new Date();\n  const executionTime1 = endTime.getTime() - startTime.getTime();\n\n  startTime = new Date();\n\n  arrayList.increaseCapacityTo(8);\n\n  endTime = new Date();\n  const executionTime2 = endTime.getTime() - startTime.getTime();\n\n  console.log(`Execution time for increaseCapacityTo(2): ${executionTime1} ms`);\n  console.log(`Execution time for increaseCapacityTo(8): ${executionTime2} ms`);\n}\n```### @ohos.util.ArrayList.trimToCurrentLength \n\n```typescript\nimport ArrayList from '@ohos.util.ArrayList';\n\nfunction test_trimToCurrentLength() {\n  let arrayList = new ArrayList();\n\n  // Add elements to the ArrayList\n  arrayList.add(2);\n  arrayList.add(4);\n  arrayList.add(5);\n  arrayList.add(4);\n\n  // Call the trimToCurrentLength method\n  const startTime = new Date();\n  arrayList.trimToCurrentLength();\n  const endTime = new Date();\n\n  // Calculate the execution time\n  const executionTime = endTime.getTime() - startTime.getTime();\n\n  console.log(`Trimming to current length: ${executionTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutilhashsetconstructor","title":"@ohos.util.HashSet.constructor","text":"<pre><code>import HashSet from \"@ohos.util.HashSet\";\ndescribe(\"HashSet constructor\", () =&gt; {\n  test(\"should create an empty HashSet\", () =&gt; {\n    const hashSet = new HashSet();\n    expect(hashSet.size()).toBe(0);\n  });\n});\n</code></pre>"},{"location":"llm/#ohosutilhashsetisempty","title":"@ohos.util.HashSet.isEmpty","text":"<pre><code>import HashSet from \"@ohos.util.HashSet\";\n\nfunction test_isEmpty(loopCount: number) {\n  const hashSet = new HashSet&lt;number&gt;();\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    hashSet.isEmpty();\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!test_isEmpty: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutilhashsethas","title":"@ohos.util.HashSet.has","text":"<pre><code>import { HashSet } from '@ohos.util';\n\nfunction test_has(loopCount: number): number {\n  let hashSet = new HashSet&lt;string&gt;();\n  for (let i = 0; i &lt; loopCount; i++) {\n    hashSet.add(`element-${i}`);\n  }\n\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    hashSet.has(`element-${i}`);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  return executionTime;\n}\n\nconsole.log(test_has(100));\n```### @ohos.util.HashSet.add \n\n```typescript\nimport ohos.util.HashSet from @ohos.util.HashSet\n\nfunction test_add(loopCount: number) {\n  const hashSet = new HashSet&lt;string&gt;();\n\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    hashSet.add(`value_${i}`);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutilhashsetremove","title":"@ohos.util.HashSet.remove","text":"<pre><code>import HashSet from \"@ohos.util.HashSet\";\n\nfunction test_remove(loopCount: number) {\n  let set = new HashSet&lt;number&gt;();\n  for (let i = 0; i &lt; loopCount; i++) {\n    set.add(i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    set.remove(i);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutilhashsetclear","title":"@ohos.util.HashSet.clear","text":"<pre><code>import ohos.util.HashSet from @ohos.util.HashSet;\n\nfunction test_clear(loopCount: number) {\n  let set = new HashSet&lt;number&gt;();\n  for (let i = 0; i &lt; loopCount; i++) {\n    set.add(i);\n  }\n  const startTime = new Date();\n  set.clear();\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  console.log(`!${test_id}: ${executionTime} ms`);\n}\n</code></pre>"},{"location":"llm/#ohosutilhashsetvalues","title":"@ohos.util.HashSet.values","text":"<pre><code>import HashSet from 'ohos.util.HashSet';\n\nfunction test_values(loopCount: number) {\n  let set = new HashSet&lt;number&gt;();\n  for (let i = 0; i &lt; loopCount; i++) {\n    set.add(i);\n  }\n\n  const startTime = new Date();\n  let iter = set.values();\n  let temp = iter.next().value;\n  while (temp !== undefined) {\n    temp = iter.next().value;\n  }\n  const endTime = new Date();\n\n  const executionTime = endTime.getTime() - startTime.getTime();\n  console.log(`!${test_id}: ${executionTime} ms`);\n}\n```### @ohos.util.HashSet.forEach \n\n```typescript\nimport ohos.util.HashSet from \"@ohos.util.HashSet\";\n\nfunction test_forEach() {\n  let hashSet = new HashSet();\n  hashSet.add(\"sparrow\");\n  hashSet.add(\"squirrel\");\n  hashSet.forEach((value, key) =&gt; {\n    console.log(\"value:\" + value, \"key:\" + key);\n  });\n}\n\ntest_forEach();\n</code></pre>"},{"location":"llm/#ohosutilhashsetentries","title":"@ohos.util.HashSet.entries","text":"<pre><code>import HashSet from \"@ohos.util.HashSet\";\n\nfunction test_entries(loopCount: number) {\n  let hashSet = new HashSet();\n  hashSet.add(\"squirrel\");\n  hashSet.add(\"sparrow\");\n\n  const startTime = new Date();\n\n  let iter = hashSet.entries();\n  let temp = iter.next().value;\n  while (temp != undefined) {\n    console.log(\"key:\" + temp[0]);\n    console.log(\"value:\" + temp[1]);\n    temp = iter.next().value;\n  }\n\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/%40ohos.util.ArrayList/","title":"@ohos.util.ArrayList","text":""},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/%40ohos.util.ArrayList/#ohosutilarraylisthas","title":"@ohos.util.ArrayList.has","text":"<p> \u5b98\u65b9API\u6587\u6863</p> <p> \u6d4b\u8bd5\u7528\u4f8b 1: \u6d4b\u8bd5\u5728\u6700\u574f\u60c5\u51b5\u4e0b\uff08\u67e5\u627e\u5143\u7d20\u4e0d\u5b58\u5728\u7684\u60c5\u51b5\uff09ArrayList\u5bb9\u5668\u7684has\u63a5\u53e3\uff0cArrayList\u957f\u5ea6\u4e3a500000 </p> <p><pre><code>function test_has(loopCount: number) {\n  let list = new ArrayList&lt;number&gt;();\n  for (let i = 0; i &lt; 500000; i++) {\n    list.add(i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    list.has(500000);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>  \u6d4b\u8bd5\u7528\u4f8b 2: \u6d4b\u8bd5\u5728\u6700\u4f18\u60c5\u51b5\u4e0b\uff08\u67e5\u627e\u5143\u7d20\u4e3a\u7b2c\u4e00\u4e2a\uff09ArrayList\u5bb9\u5668\u7684has\u63a5\u53e3\uff0cArrayList\u957f\u5ea6\u4e3a500000 </p> <p><pre><code>function test_has2(loopCount: number) {\n  let list = new ArrayList&lt;number&gt;();\n  for (let i = 0; i &lt; 500000; i++) {\n    list.add(i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    list.has(0);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>  \u6d4b\u8bd5\u7ed3\u679c</p> \u6d4b\u8bd5\u7528\u4f8b \u6d4b\u8bd5\u5e73\u53f0 \u8fd0\u884c\u65f6\u95f4 \u6d4b\u8bd5\u7528\u4f8b 1 Huawei Phone 0.515000 ms \u6d4b\u8bd5\u7528\u4f8b 2 Huawei Phone 0.000060 ms"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/%40ohos.util.ArrayList/#ohosutilarraylistinsert","title":"@ohos.util.ArrayList.insert","text":"<p> \u5b98\u65b9API\u6587\u6863</p> <p> \u6d4b\u8bd5\u7528\u4f8b 1: \u6d4b\u8bd5ArrayList\u5bb9\u5668insert\u63a5\u53e3 </p> <p><pre><code>function test_insert(loopCount: number) {\n  let list = new ArrayList&lt;number&gt;();\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    list.insert(0,i);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>  \u6d4b\u8bd5\u7ed3\u679c</p> \u6d4b\u8bd5\u7528\u4f8b \u6d4b\u8bd5\u5e73\u53f0 \u8fd0\u884c\u65f6\u95f4 \u6d4b\u8bd5\u7528\u4f8b 1 Huawei Phone 0.000100 ms"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/%40ohos.util.ArrayList/#ohosutilarraylistadd","title":"@ohos.util.ArrayList.add","text":"<p> \u5b98\u65b9API\u6587\u6863</p> <p> \u6d4b\u8bd5\u7528\u4f8b 1: \u6d4b\u8bd5ArrayList\u5bb9\u5668add\u63a5\u53e3 </p> <p><pre><code>function test_add(loopCount: number) {\n  let list = new ArrayList&lt;number&gt;();\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    list.add(1);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>  \u6d4b\u8bd5\u7ed3\u679c</p> \u6d4b\u8bd5\u7528\u4f8b \u6d4b\u8bd5\u5e73\u53f0 \u8fd0\u884c\u65f6\u95f4 \u6d4b\u8bd5\u7528\u4f8b 1 Huawei Phone 0.000168 ms"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/%40ohos.util.Deque/","title":"@ohos.util.Deque","text":""},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/%40ohos.util.Deque/#ohosutildequeinsertend","title":"@ohos.util.Deque.insertEnd","text":"<p> \u5b98\u65b9API\u6587\u6863</p> <p> \u6d4b\u8bd5\u7528\u4f8b 1: \u6d4b\u8bd5Deque\u5bb9\u5668insertEnd\u63a5\u53e3 </p> <p><pre><code>function test_insert_end(loopCount: number) {\n  let deque = new Deque&lt;number&gt;();\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    deque.insertEnd(1);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>  \u6d4b\u8bd5\u7ed3\u679c</p> \u6d4b\u8bd5\u7528\u4f8b \u6d4b\u8bd5\u5e73\u53f0 \u8fd0\u884c\u65f6\u95f4 \u6d4b\u8bd5\u7528\u4f8b 1 Huawei Phone 0.036660 ms"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/%40ohos.util.Deque/#ohosutildequeinsertfront","title":"@ohos.util.Deque.insertFront","text":"<p> \u5b98\u65b9API\u6587\u6863</p> <p> \u6d4b\u8bd5\u7528\u4f8b 1: \u6d4b\u8bd5Deque\u5bb9\u5668insertFront\u63a5\u53e3 </p> <p><pre><code>function test_insert_front(loopCount: number) {\n  let deque = new Deque&lt;number&gt;();\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    deque.insertFront(1);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>  \u6d4b\u8bd5\u7ed3\u679c</p> \u6d4b\u8bd5\u7528\u4f8b \u6d4b\u8bd5\u5e73\u53f0 \u8fd0\u884c\u65f6\u95f4 \u6d4b\u8bd5\u7528\u4f8b 1 Huawei Phone 0.000284 ms"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/%40ohos.util.Deque/#ohosutildequehas","title":"@ohos.util.Deque.has","text":"<p> \u5b98\u65b9API\u6587\u6863</p> <p> \u6d4b\u8bd5\u7528\u4f8b 1: \u6d4b\u8bd5\u5728\u6700\u574f\u60c5\u51b5\u4e0b\uff08\u67e5\u627e\u5143\u7d20\u4e0d\u5b58\u5728\u7684\u60c5\u51b5\uff09Deque\u5bb9\u5668\u7684has\u63a5\u53e3\uff0cDeque\u957f\u5ea6\u4e3a500000 </p> <p><pre><code>function test_has(loopCount: number) {\n  let deque = new Deque&lt;number&gt;();\n  for (let i = 0; i &lt; 500000; i++) {\n    deque.insertEnd(1);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    deque.has(500000);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>  \u6d4b\u8bd5\u7528\u4f8b 2: \u6d4b\u8bd5\u5728\u6700\u4f18\u60c5\u51b5\u4e0b\uff08\u67e5\u627e\u5143\u7d20\u4e3a\u7b2c\u4e00\u4e2a\uff09Deque\u5bb9\u5668\u7684has\u63a5\u53e3\uff0cDeque\u957f\u5ea6\u4e3a500000 </p> <p><pre><code>function test_has2(loopCount: number) {\n  let deque = new Deque&lt;number&gt;();\n  for (let i = 0; i &lt; 500000; i++) {\n    deque.insertEnd(1);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    deque.has(0);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>  \u6d4b\u8bd5\u7ed3\u679c</p> \u6d4b\u8bd5\u7528\u4f8b \u6d4b\u8bd5\u5e73\u53f0 \u8fd0\u884c\u65f6\u95f4 \u6d4b\u8bd5\u7528\u4f8b 1 Huawei Phone 0.717333 ms \u6d4b\u8bd5\u7528\u4f8b 2 Huawei Phone 0.000067 ms"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/%40ohos.util.HashMap/","title":"@ohos.util.HashMap","text":""},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/%40ohos.util.HashMap/#ohosutilhashmapget","title":"@ohos.util.HashMap.get","text":"<p> \u5b98\u65b9API\u6587\u6863</p> <p> \u6d4b\u8bd5\u7528\u4f8b 1: \u6d4b\u8bd5HashMap\u5bb9\u5668get\u63a5\u53e3 </p> <p><pre><code>function test_get(loopCount: number) {\n  let hashMap = new HashMap&lt;number, number&gt;();\n  for (let i = 0; i &lt; loopCount; i++) {\n    hashMap.set(i, 1);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    hashMap.get(i);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>  \u6d4b\u8bd5\u7ed3\u679c</p> \u6d4b\u8bd5\u7528\u4f8b \u6d4b\u8bd5\u5e73\u53f0 \u8fd0\u884c\u65f6\u95f4 \u6d4b\u8bd5\u7528\u4f8b 1 Huawei Phone 0.000163 ms"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/%40ohos.util.HashMap/#ohosutilhashmapset","title":"@ohos.util.HashMap.set","text":"<p> \u5b98\u65b9API\u6587\u6863</p> <p> \u6d4b\u8bd5\u7528\u4f8b 1: \u6d4b\u8bd5HashMap\u5bb9\u5668set\u63a5\u53e3 </p> <p><pre><code>function test_set(loopCount: number) {\n  let hashMap = new HashMap&lt;number, number&gt;();\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    hashMap.set(i, 1);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>  \u6d4b\u8bd5\u7ed3\u679c</p> \u6d4b\u8bd5\u7528\u4f8b \u6d4b\u8bd5\u5e73\u53f0 \u8fd0\u884c\u65f6\u95f4 \u6d4b\u8bd5\u7528\u4f8b 1 Huawei Phone 0.000610 ms"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/%40ohos.util.HashMap/#ohosutilhashmaphaskey","title":"@ohos.util.HashMap.hasKey","text":"<p> \u5b98\u65b9API\u6587\u6863</p> <p> \u6d4b\u8bd5\u7528\u4f8b 1: \u6d4b\u8bd5HashMap\u5bb9\u5668\u7684hasKey\u63a5\u53e3\uff08\u6700\u597d\u60c5\u51b5\uff09\uff0cHashMap\u957f\u5ea6\u4e3a1000000 </p> <p><pre><code>function test_hasKey1(loopCount: number) {\n  let hashMap = new HashMap&lt;number, number&gt;();\n  for (let i = 0; i &lt; 1000000; i++) {\n    hashMap.set(i,1)\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    hashMap.hasKey(0)\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>  \u6d4b\u8bd5\u7528\u4f8b 2: \u6d4b\u8bd5HashMap\u5bb9\u5668\u7684hasKey\u63a5\u53e3\uff08\u6700\u574f\u60c5\u51b5\uff09\uff0cHashMap\u957f\u5ea6\u4e3a1000000 </p> <p><pre><code>function test_hasKey2(loopCount: number) {\n  let hashMap = new HashMap&lt;number, number&gt;();\n  for (let i = 0; i &lt; 1000000; i++) {\n    hashMap.set(i,1)\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    hashMap.hasKey(1000000)\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>  \u6d4b\u8bd5\u7ed3\u679c</p> \u6d4b\u8bd5\u7528\u4f8b \u6d4b\u8bd5\u5e73\u53f0 \u8fd0\u884c\u65f6\u95f4 \u6d4b\u8bd5\u7528\u4f8b 1 Huawei Phone 0.000071 ms \u6d4b\u8bd5\u7528\u4f8b 2 Huawei Phone 0.000073 ms"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/%40ohos.util.HashMap/#ohosutilhashmaphasvalue","title":"@ohos.util.HashMap.hasValue","text":"<p> \u5b98\u65b9API\u6587\u6863</p> <p> \u6d4b\u8bd5\u7528\u4f8b 1: \u6d4b\u8bd5Hashmap\u5bb9\u5668\u7684hasValue\u63a5\u53e3\uff08\u6700\u597d\u60c5\u51b5\uff09\uff0cHashMap\u957f\u5ea6\u4e3a1000000 </p> <p><pre><code>function test_hasValue1(loopCount: number) {\n  let hashMap = new HashMap&lt;number, number&gt;();\n  for (let i = 0; i &lt; 1000000; i++) {\n    hashMap.set(i,i)\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    hashMap.hasValue(0);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>  \u6d4b\u8bd5\u7528\u4f8b 2: \u6d4b\u8bd5Hashmap\u5bb9\u5668\u7684hasValue\u63a5\u53e3\uff08\u6700\u574f\u60c5\u51b5\uff09\uff0cHashMap\u957f\u5ea6\u4e3a1000000 </p> <p><pre><code>function test_hasValue2(loopCount: number) {\n  let hashMap = new HashMap&lt;number, number&gt;();\n  for (let i = 0; i &lt; 1000000; i++) {\n    hashMap.set(i,i)\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    hashMap.hasValue(1000000);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>  \u6d4b\u8bd5\u7ed3\u679c</p> \u6d4b\u8bd5\u7528\u4f8b \u6d4b\u8bd5\u5e73\u53f0 \u8fd0\u884c\u65f6\u95f4 \u6d4b\u8bd5\u7528\u4f8b 1 Huawei Phone 21.393333 ms \u6d4b\u8bd5\u7528\u4f8b 2 Huawei Phone 23.966667 ms"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/%40ohos.util.HashSet/","title":"@ohos.util.HashSet","text":""},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/%40ohos.util.HashSet/#ohosutilhashsetentries","title":"@ohos.util.HashSet.entries","text":"<p> \u5b98\u65b9API\u6587\u6863</p> <p> \u6d4b\u8bd5\u7528\u4f8b 1: \u6d4b\u8bd5HashSet\u5bb9\u5668\u7684entries\u63a5\u53e3\uff0cset\u957f\u5ea6\u4e3a\u8f93\u5165\u7684loopCount </p> <p><pre><code>function test_entries(loopCount: number) {\n  let set = new HashSet&lt;number&gt;();\n  for (let i = 0; i &lt; loopCount; i++) {\n    set.add(i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    set.entries();\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>  \u6d4b\u8bd5\u7ed3\u679c</p> \u6d4b\u8bd5\u7528\u4f8b \u6d4b\u8bd5\u5e73\u53f0 \u8fd0\u884c\u65f6\u95f4 \u6d4b\u8bd5\u7528\u4f8b 1 Huawei Phone 0.001540 ms"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/%40ohos.util.HashSet/#ohosutilhashsetforeach","title":"@ohos.util.HashSet.forEach","text":"<p> \u5b98\u65b9API\u6587\u6863</p> <p> \u6d4b\u8bd5\u7528\u4f8b 1: \u6d4b\u8bd5HashSet\u5bb9\u5668\u7684forEach\u63a5\u53e3,set\u957f\u5ea6\u4e3a500000 </p> <p><pre><code>function test_forEach(loopCount: number) {\n  let set = new HashSet&lt;number&gt;();\n  for (let i = 0; i &lt; 500000; i++) {\n    set.add(i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    set.forEach((value?: number, key?: number) =&gt; {\n    });\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>  \u6d4b\u8bd5\u7ed3\u679c</p> \u6d4b\u8bd5\u7528\u4f8b \u6d4b\u8bd5\u5e73\u53f0 \u8fd0\u884c\u65f6\u95f4 \u6d4b\u8bd5\u7528\u4f8b 1 Huawei Phone 63.176667 ms"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/%40ohos.util.HashSet/#ohosutilhashsetadd","title":"@ohos.util.HashSet.add","text":"<p> \u5b98\u65b9API\u6587\u6863</p> <p> \u6d4b\u8bd5\u7528\u4f8b 1: \u6d4b\u8bd5HashSet\u5bb9\u5668add\u63a5\u53e3 </p> <p><pre><code>function test_add(loopCount: number) {\n  let set = new HashSet&lt;number&gt;();\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    set.add(1);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>  \u6d4b\u8bd5\u7ed3\u679c</p> \u6d4b\u8bd5\u7528\u4f8b \u6d4b\u8bd5\u5e73\u53f0 \u8fd0\u884c\u65f6\u95f4 \u6d4b\u8bd5\u7528\u4f8b 1 Huawei Phone 0.000288 ms"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/%40ohos.util.HashSet/#ohosutilhashsetremove","title":"@ohos.util.HashSet.remove","text":"<p> \u5b98\u65b9API\u6587\u6863</p> <p> \u6d4b\u8bd5\u7528\u4f8b 1: \u6d4b\u8bd5HashSet\u5bb9\u5668remove\u63a5\u53e3 </p> <p><pre><code>function test_remove(loopCount: number) {\n  let set = new HashSet&lt;number&gt;();\n  for (let i = 0; i &lt; loopCount; i++) {\n    set.add(i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    set.remove(i);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>  \u6d4b\u8bd5\u7ed3\u679c</p> \u6d4b\u8bd5\u7528\u4f8b \u6d4b\u8bd5\u5e73\u53f0 \u8fd0\u884c\u65f6\u95f4 \u6d4b\u8bd5\u7528\u4f8b 1 Huawei Phone 0.000138 ms"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/%40ohos.util.HashSet/#ohosutilhashsetvalues","title":"@ohos.util.HashSet.values","text":"<p> \u5b98\u65b9API\u6587\u6863</p> <p> \u6d4b\u8bd5\u7528\u4f8b 1: \u6d4b\u8bd5HashSet\u5bb9\u5668\u7684values\u63a5\u53e3\uff0cset\u957f\u5ea6\u4e3a\u8f93\u5165\u7684loopCount </p> <p><pre><code>function test_values(loopCount: number) {\n  let set = new HashSet&lt;number&gt;();\n  for (let i = 0; i &lt; loopCount; i++) {\n    set.add(i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    set.values();\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>  \u6d4b\u8bd5\u7ed3\u679c</p> \u6d4b\u8bd5\u7528\u4f8b \u6d4b\u8bd5\u5e73\u53f0 \u8fd0\u884c\u65f6\u95f4 \u6d4b\u8bd5\u7528\u4f8b 1 Huawei Phone 0.000930 ms"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/%40ohos.util.HashSet/#ohosutilhashsethas","title":"@ohos.util.HashSet.has","text":"<p> \u5b98\u65b9API\u6587\u6863</p> <p> \u6d4b\u8bd5\u7528\u4f8b 1: \u6d4b\u8bd5\u5728\u6700\u574f\u60c5\u51b5\u4e0b\uff08\u67e5\u627e\u5143\u7d20\u4e0d\u5b58\u5728\u7684\u60c5\u51b5\uff09HashSet\u5bb9\u5668\u7684has\u63a5\u53e3\uff0cset\u957f\u5ea6\u4e3a500000 </p> <p><pre><code>function test_has(loopCount: number) {\n  let set = new HashSet&lt;number&gt;();\n  for (let i = 0; i &lt; 500000; i++) {\n    set.add(i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    set.has(500000);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>  \u6d4b\u8bd5\u7528\u4f8b 2: \u6d4b\u8bd5\u5728\u6700\u4f18\u60c5\u51b5\u4e0b\uff08\u67e5\u627e\u5143\u7d20\u4e3a\u7b2c\u4e00\u4e2a\uff09HashSet\u5bb9\u5668\u7684has\u63a5\u53e3\uff0cset\u957f\u5ea6\u4e3a5000000 </p> <p><pre><code>function test_has2(loopCount: number) {\n  let set = new HashSet&lt;number&gt;();\n  for (let i = 0; i &lt; 500000; i++) {\n    set.add(i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    set.has(0);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>  \u6d4b\u8bd5\u7ed3\u679c</p> \u6d4b\u8bd5\u7528\u4f8b \u6d4b\u8bd5\u5e73\u53f0 \u8fd0\u884c\u65f6\u95f4 \u6d4b\u8bd5\u7528\u4f8b 1 Huawei Phone 0.000118 ms \u6d4b\u8bd5\u7528\u4f8b 2 Huawei Phone 0.000070 ms"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/%40ohos.util.LinkedList/","title":"@ohos.util.LinkedList","text":""},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/%40ohos.util.LinkedList/#ohosutillinkedlisthas","title":"@ohos.util.LinkedList.has","text":"<p> \u5b98\u65b9API\u6587\u6863</p> <p> \u6d4b\u8bd5\u7528\u4f8b 1: \u6d4b\u8bd5LinkedList\u5bb9\u5668has\u65b9\u6cd5 </p> <p><pre><code>function test_has(loopCount: number) {\n  const linkedList = new LinkedList&lt;any&gt;();\n  for (let i = 0; i &lt; loopCount; i++) {\n    linkedList.add(`Element${i}`); // \u5411\u94fe\u8868\u5c3e\u90e8\u63d2\u5165\u5143\u7d20\n  }\n  const elementToFind = `Element${loopCount / 2}`; // \u5728\u94fe\u8868\u4e2d\u95f4\u4f4d\u7f6e\u63d2\u5165\u7684\u5143\u7d20\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    linkedList.has(elementToFind); // \u5224\u65ad\u94fe\u8868\u662f\u5426\u542b\u6709\u6307\u5b9a\u5143\u7d20\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>  \u6d4b\u8bd5\u7ed3\u679c</p> \u6d4b\u8bd5\u7528\u4f8b \u6d4b\u8bd5\u5e73\u53f0 \u8fd0\u884c\u65f6\u95f4 \u6d4b\u8bd5\u7528\u4f8b 1 Huawei Phone 0.057000 ms"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/%40ohos.util.LinkedList/#ohosutillinkedlistaddfirst","title":"@ohos.util.LinkedList.addFirst","text":"<p> \u5b98\u65b9API\u6587\u6863</p> <p> \u6d4b\u8bd5\u7528\u4f8b 1: \u6d4b\u8bd5LinkedList\u5bb9\u5668addFirst\u65b9\u6cd5 </p> <p><pre><code>function test_addFirst(loopCount: number) {\n  const linkedList = new LinkedList&lt;any&gt;();\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    linkedList.addFirst(`Element${i}`); // \u5728\u94fe\u8868\u5934\u90e8\u63d2\u5165\u5143\u7d20\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>  \u6d4b\u8bd5\u7ed3\u679c</p> \u6d4b\u8bd5\u7528\u4f8b \u6d4b\u8bd5\u5e73\u53f0 \u8fd0\u884c\u65f6\u95f4 \u6d4b\u8bd5\u7528\u4f8b 1 Huawei Phone 0.000798 ms"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/%40ohos.util.LinkedList/#ohosutillinkedlistadd","title":"@ohos.util.LinkedList.add","text":"<p> \u5b98\u65b9API\u6587\u6863</p> <p> \u6d4b\u8bd5\u7528\u4f8b 1: \u6d4b\u8bd5LinkedList\u5bb9\u5668add\u65b9\u6cd5 </p> <p><pre><code>function test_add(loopCount: number) {\n  let linkedList = new LinkedList&lt;any&gt;();\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    linkedList.add(`Element${i}`); // \u5728\u94fe\u8868\u5c3e\u90e8\u63d2\u5165\u5143\u7d20\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>  \u6d4b\u8bd5\u7ed3\u679c</p> \u6d4b\u8bd5\u7528\u4f8b \u6d4b\u8bd5\u5e73\u53f0 \u8fd0\u884c\u65f6\u95f4 \u6d4b\u8bd5\u7528\u4f8b 1 Huawei Phone 0.001264 ms"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/%40ohos.util.LinkedList/#ohosutillinkedlistinsert","title":"@ohos.util.LinkedList.insert","text":"<p> \u5b98\u65b9API\u6587\u6863</p> <p> \u6d4b\u8bd5\u7528\u4f8b 1: \u6d4b\u8bd5LinkedList\u5bb9\u5668insert\u65b9\u6cd5 </p> <p><pre><code>function test_insert(loopCount: number) {\n  const linkedList = new LinkedList&lt;any&gt;();\n  for (let i = 0; i &lt; loopCount; i++) {\n    linkedList.add(`Element${i}`); // \u5411\u94fe\u8868\u5c3e\u90e8\u63d2\u5165\u5143\u7d20\n  }\n  const indexToInsert = loopCount / 2; // \u5728\u94fe\u8868\u4e2d\u95f4\u4f4d\u7f6e\u63d2\u5165\u5143\u7d20\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    linkedList.insert(indexToInsert, `NewElement${i}`); // \u5728\u6307\u5b9a\u7d22\u5f15\u4f4d\u7f6e\u63d2\u5165\u5143\u7d20\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>  \u6d4b\u8bd5\u7ed3\u679c</p> \u6d4b\u8bd5\u7528\u4f8b \u6d4b\u8bd5\u5e73\u53f0 \u8fd0\u884c\u65f6\u95f4 \u6d4b\u8bd5\u7528\u4f8b 1 Huawei Phone 0.001480 ms"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/%40ohos.util.LinkedList/#ohosutillinkedlistget","title":"@ohos.util.LinkedList.get","text":"<p> \u5b98\u65b9API\u6587\u6863</p> <p> \u6d4b\u8bd5\u7528\u4f8b 1: \u6d4b\u8bd5LinkedList\u5bb9\u5668get\u65b9\u6cd5 </p> <p><pre><code>function test_get(loopCount: number) {\n  const linkedList = new LinkedList&lt;any&gt;();\n  for (let i = 0; i &lt; loopCount; i++) {\n    linkedList.add(`Element${i}`); // \u5411\u94fe\u8868\u5c3e\u90e8\u63d2\u5165\u5143\u7d20\n  }\n  const indexToGet = loopCount / 2; // \u83b7\u53d6\u94fe\u8868\u4e2d\u95f4\u4f4d\u7f6e\u7684\u5143\u7d20\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    linkedList.get(indexToGet); // \u6839\u636e\u7d22\u5f15\u83b7\u53d6\u94fe\u8868\u4e2d\u7684\u5143\u7d20\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>  \u6d4b\u8bd5\u7ed3\u679c</p> \u6d4b\u8bd5\u7528\u4f8b \u6d4b\u8bd5\u5e73\u53f0 \u8fd0\u884c\u65f6\u95f4 \u6d4b\u8bd5\u7528\u4f8b 1 Huawei Phone 0.000064 ms"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/%40ohos.util.List/","title":"@ohos.util.List","text":""},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/%40ohos.util.List/#ohosutillistinsert","title":"@ohos.util.List.insert","text":"<p> \u5b98\u65b9API\u6587\u6863</p> <p> \u6d4b\u8bd5\u7528\u4f8b 1: \u6d4b\u8bd5List\u5bb9\u5668insert\u63a5\u53e3 </p> <p><pre><code>function test_insert(loopCount: number) {\n  let list = new List&lt;number&gt;();\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    list.insert(0,i);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>  \u6d4b\u8bd5\u7ed3\u679c</p> \u6d4b\u8bd5\u7528\u4f8b \u6d4b\u8bd5\u5e73\u53f0 \u8fd0\u884c\u65f6\u95f4 \u6d4b\u8bd5\u7528\u4f8b 1 Huawei Phone 0.036100 ms"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/%40ohos.util.List/#ohosutillisthas","title":"@ohos.util.List.has","text":"<p> \u5b98\u65b9API\u6587\u6863</p> <p> \u6d4b\u8bd5\u7528\u4f8b 1: \u6d4b\u8bd5\u5728\u6700\u574f\u60c5\u51b5\u4e0b\uff08\u67e5\u627e\u5143\u7d20\u4e0d\u5b58\u5728\u7684\u60c5\u51b5\uff09List\u5bb9\u5668\u7684has\u63a5\u53e3\uff0cList\u957f\u5ea6\u4e3a100000 </p> <p><pre><code>function test_has(loopCount: number) {\n  let list = new List&lt;number&gt;();\n  for (let i = 0; i &lt; 100000; i++) {\n    list.add(i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    list.has(500000);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>  \u6d4b\u8bd5\u7528\u4f8b 2: \u6d4b\u8bd5\u5728\u6700\u4f18\u60c5\u51b5\u4e0b\uff08\u67e5\u627e\u5143\u7d20\u4e3a\u7b2c\u4e00\u4e2a\uff09List\u5bb9\u5668\u7684has\u63a5\u53e3\uff0cList\u957f\u5ea6\u4e3a5000000 </p> <p><pre><code>function test_has2(loopCount: number) {\n  let list = new List&lt;number&gt;();\n  for (let i = 0; i &lt; 5000000; i++) {\n    list.add(i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    list.has(0);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>  \u6d4b\u8bd5\u7ed3\u679c</p> \u6d4b\u8bd5\u7528\u4f8b \u6d4b\u8bd5\u5e73\u53f0 \u8fd0\u884c\u65f6\u95f4 \u6d4b\u8bd5\u7528\u4f8b 1 Huawei Phone 0.140000 ms \u6d4b\u8bd5\u7528\u4f8b 2 Huawei Phone 0.000063 ms"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/%40ohos.util.List/#ohosutillistsort","title":"@ohos.util.List.sort","text":"<p> \u5b98\u65b9API\u6587\u6863</p> <p> \u6d4b\u8bd5\u7528\u4f8b 1: \u6d4b\u8bd5List\u5bb9\u5668sort\u63a5\u53e3 </p> <p><pre><code>function test_sort(loopCount: number) {\n  let list = new List&lt;number&gt;();\n  for (let i = loopCount; i &gt; 0; i--) {\n    list.add(i);\n  }\n  const startTime = new Date();\n    list.sort((a: number, b: number) =&gt; a - b);\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>  \u6d4b\u8bd5\u7ed3\u679c</p> \u6d4b\u8bd5\u7528\u4f8b \u6d4b\u8bd5\u5e73\u53f0 \u8fd0\u884c\u65f6\u95f4 \u6d4b\u8bd5\u7528\u4f8b 1 Huawei Phone 0.023360 ms"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/%40ohos.util.List/#ohosutillistremove","title":"@ohos.util.List.remove","text":"<p> \u5b98\u65b9API\u6587\u6863</p> <p> \u6d4b\u8bd5\u7528\u4f8b 1: \u6d4b\u8bd5\u5728\u6700\u574f\u60c5\u51b5\u4e0b\uff08\u67e5\u627e\u5143\u7d20\u4e0d\u5b58\u5728\u7684\u60c5\u51b5\uff09List\u5bb9\u5668\u7684remove\u63a5\u53e3\uff0cList\u957f\u5ea6\u4e3a50000 </p> <p><pre><code>function test_remove(loopCount: number) {\n  let list = new List&lt;number&gt;();\n  for (let i = 0; i &lt; 50000; i++) {\n    list.add(i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    list.remove(50000);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>  \u6d4b\u8bd5\u7528\u4f8b 2: \u6d4b\u8bd5\u5728\u6700\u4f18\u60c5\u51b5\u4e0b\uff08\u67e5\u627e\u5143\u7d20\u4e3a\u7b2c\u4e00\u4e2a\uff09List\u5bb9\u5668\u7684remove\u63a5\u53e3\uff0cList\u957f\u5ea6\u4e3a5000000 </p> <p><pre><code>function test_remove2(loopCount: number) {\n  let list = new List&lt;number&gt;();\n  for (let i = 0; i &lt; 5000000; i++) {\n    list.add(i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    list.remove(i);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>  \u6d4b\u8bd5\u7ed3\u679c</p> \u6d4b\u8bd5\u7528\u4f8b \u6d4b\u8bd5\u5e73\u53f0 \u8fd0\u884c\u65f6\u95f4 \u6d4b\u8bd5\u7528\u4f8b 1 Huawei Phone 0.086740 ms \u6d4b\u8bd5\u7528\u4f8b 2 Huawei Phone 0.000067 ms"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/%40ohos.util.List/#ohosutillistadd","title":"@ohos.util.List.add","text":"<p> \u5b98\u65b9API\u6587\u6863</p> <p> \u6d4b\u8bd5\u7528\u4f8b 1: \u6d4b\u8bd5List\u5bb9\u5668add\u63a5\u53e3 </p> <p><pre><code>function test_add(loopCount: number) {\n  let list = new List&lt;number&gt;();\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    list.add(1);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>  \u6d4b\u8bd5\u7ed3\u679c</p> \u6d4b\u8bd5\u7528\u4f8b \u6d4b\u8bd5\u5e73\u53f0 \u8fd0\u884c\u65f6\u95f4 \u6d4b\u8bd5\u7528\u4f8b 1 Huawei Phone 0.000106 ms"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/%40ohos.util.PlainArray/","title":"@ohos.util.PlainArray","text":""},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/%40ohos.util.PlainArray/#ohosutilplainarrayget","title":"@ohos.util.PlainArray.get","text":"<p> \u5b98\u65b9API\u6587\u6863</p> <p> \u6d4b\u8bd5\u7528\u4f8b 1: \u6d4b\u8bd5PlainArray\u5bb9\u5668get\u65b9\u6cd5 </p> <p><pre><code>function test_get(loopCount: number) {\n  const plainArray = new PlainArray&lt;string&gt;();\n  for (let i = 0; i &lt; loopCount; i++) {\n    plainArray.add(i, `Value${i}`);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    plainArray.get(i);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>  \u6d4b\u8bd5\u7ed3\u679c</p> \u6d4b\u8bd5\u7528\u4f8b \u6d4b\u8bd5\u5e73\u53f0 \u8fd0\u884c\u65f6\u95f4 \u6d4b\u8bd5\u7528\u4f8b 1 Huawei Phone 0.000106 ms"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/%40ohos.util.PlainArray/#ohosutilplainarraygetindexofkey","title":"@ohos.util.PlainArray.getIndexOfKey","text":"<p> \u5b98\u65b9API\u6587\u6863</p> <p> \u6d4b\u8bd5\u7528\u4f8b 1: \u6d4b\u8bd5PlainArray\u5bb9\u5668getIndexOfKey\u65b9\u6cd5\uff08\u6700\u574f\u60c5\u51b5\uff0c\u67e5\u627e\u4e0d\u5b58\u5728\u7684\u952e\uff09 </p> <p><pre><code>function test_getIndexOfKey(loopCount: number) {\n  const plainArray = new PlainArray&lt;string&gt;();\n  for (let i = 0; i &lt; loopCount; i++) {\n    plainArray.add(i, `Value${i}`);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    plainArray.getIndexOfKey(500000);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>  \u6d4b\u8bd5\u7ed3\u679c</p> \u6d4b\u8bd5\u7528\u4f8b \u6d4b\u8bd5\u5e73\u53f0 \u8fd0\u884c\u65f6\u95f4 \u6d4b\u8bd5\u7528\u4f8b 1 Huawei Phone 0.000124 ms"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/%40ohos.util.PlainArray/#ohosutilplainarraygetkeyat","title":"@ohos.util.PlainArray.getKeyAt","text":"<p> \u5b98\u65b9API\u6587\u6863</p> <p> \u6d4b\u8bd5\u7528\u4f8b 1: \u6d4b\u8bd5PlainArray\u5bb9\u5668getKeyAt\u65b9\u6cd5 </p> <p><pre><code>function test_getKeyAt(loopCount: number) {\n  const plainArray = new PlainArray&lt;string&gt;();\n  for (let i = 0; i &lt; loopCount; i++) {\n    plainArray.add(i, `Value${i}`);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    plainArray.getKeyAt(i);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>  \u6d4b\u8bd5\u7ed3\u679c</p> \u6d4b\u8bd5\u7528\u4f8b \u6d4b\u8bd5\u5e73\u53f0 \u8fd0\u884c\u65f6\u95f4 \u6d4b\u8bd5\u7528\u4f8b 1 Huawei Phone 0.000058 ms"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/%40ohos.util.PlainArray/#ohosutilplainarrayadd","title":"@ohos.util.PlainArray.add","text":"<p> \u5b98\u65b9API\u6587\u6863</p> <p> \u6d4b\u8bd5\u7528\u4f8b 1: \u6d4b\u8bd5PlainArray\u5bb9\u5668add\u63a5\u53e3 </p> <p><pre><code>function test_add(loopCount: number) {\n  let plainArray = new PlainArray&lt;string&gt;();\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    plainArray.add(i, \"test\");\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>  \u6d4b\u8bd5\u7ed3\u679c</p> \u6d4b\u8bd5\u7528\u4f8b \u6d4b\u8bd5\u5e73\u53f0 \u8fd0\u884c\u65f6\u95f4 \u6d4b\u8bd5\u7528\u4f8b 1 Huawei Phone 0.000154 ms"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/%40ohos.util.PlainArray/#ohosutilplainarrayhas","title":"@ohos.util.PlainArray.has","text":"<p> \u5b98\u65b9API\u6587\u6863</p> <p> \u6d4b\u8bd5\u7528\u4f8b 1: \u6d4b\u8bd5\u5728\u6700\u574f\u60c5\u51b5\u4e0b\uff08\u67e5\u627e\u5143\u7d20\u4e0d\u5b58\u5728\u7684\u60c5\u51b5\uff09PlainArray\u5bb9\u5668\u7684has\u63a5\u53e3\uff0cList\u957f\u5ea6\u4e3a500000 </p> <p><pre><code>function test_has(loopCount: number) {\n  let plainArray = new PlainArray&lt;string&gt;();\n  for (let i = 0; i &lt; loopCount; i++) {\n    plainArray.add(i, \"test\");\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    plainArray.has(500000);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>  \u6d4b\u8bd5\u7528\u4f8b 2: \u6d4b\u8bd5\u5728\u6700\u4f18\u60c5\u51b5\u4e0b\uff08\u67e5\u627e\u5143\u7d20\u4e3a\u7b2c\u4e00\u4e2a\uff09PlainArray\u5bb9\u5668\u7684has\u63a5\u53e3\uff0cList\u957f\u5ea6\u4e3a5000000 </p> <p><pre><code>function test_has2(loopCount: number) {\n  let plainArray = new PlainArray&lt;string&gt;();\n  for (let i = 0; i &lt; loopCount; i++) {\n    plainArray.add(i, \"test\");\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    plainArray.has(0);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>  \u6d4b\u8bd5\u7ed3\u679c</p> \u6d4b\u8bd5\u7528\u4f8b \u6d4b\u8bd5\u5e73\u53f0 \u8fd0\u884c\u65f6\u95f4 \u6d4b\u8bd5\u7528\u4f8b 1 Huawei Phone 0.000084 ms \u6d4b\u8bd5\u7528\u4f8b 2 Huawei Phone 0.000066 ms"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/%40ohos.util.PlainArray/#ohosutilplainarrayclone","title":"@ohos.util.PlainArray.clone","text":"<p> \u5b98\u65b9API\u6587\u6863</p> <p> \u6d4b\u8bd5\u7528\u4f8b 1: \u6d4b\u8bd5PlainArray\u5bb9\u5668clone\u65b9\u6cd5 </p> <p><pre><code>function test_clone(loopCount: number) {\n  const plainArray = new PlainArray&lt;string&gt;();\n  for (let i = 0; i &lt; loopCount; i++) {\n    plainArray.add(i, `Value${i}`);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    const clonedArray = plainArray.clone(); // \u5728\u8fd9\u91cc\u8fdb\u884c clone \u64cd\u4f5c\uff0c\u514b\u9686\u4e00\u4e2a\u65b0\u7684\u5b9e\u4f8b\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>  \u6d4b\u8bd5\u7ed3\u679c</p> \u6d4b\u8bd5\u7528\u4f8b \u6d4b\u8bd5\u5e73\u53f0 \u8fd0\u884c\u65f6\u95f4 \u6d4b\u8bd5\u7528\u4f8b 1 Huawei Phone 0.033600 ms"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/%40ohos.util.Stack/","title":"@ohos.util.Stack","text":""},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/%40ohos.util.Stack/#ohosutilstacklocate","title":"@ohos.util.Stack.locate","text":"<p> \u5b98\u65b9API\u6587\u6863</p> <p> \u6d4b\u8bd5\u7528\u4f8b 1: \u6d4b\u8bd5\u5728\u6700\u574f\u60c5\u51b5\u4e0b\uff08\u67e5\u627e\u5143\u7d20\u4e0d\u5b58\u5728\u7684\u60c5\u51b5\uff09Stack\u5bb9\u5668\u7684locate\u63a5\u53e3\uff0cStack\u957f\u5ea6\u4e3a100000 </p> <p><pre><code>function test_locate(loopCount: number) {\n  let stack = new Stack&lt;number&gt;();\n  for (let i = 0; i &lt; 100000; i++) {\n    stack.push(i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    stack.locate(100000);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>  \u6d4b\u8bd5\u7528\u4f8b 2: \u6d4b\u8bd5\u5728\u6700\u4f18\u60c5\u51b5\u4e0b\uff08\u67e5\u627e\u5143\u7d20\u4e3a\u7b2c\u4e00\u4e2a\uff09Stack\u5bb9\u5668\u7684locate\u63a5\u53e3\uff0cStack\u957f\u5ea6\u4e3a10000000 </p> <p><pre><code>function test_locate2(loopCount: number) {\n  let stack = new Stack&lt;number&gt;();\n  for (let i = 0; i &lt; 10000000; i++) {\n    stack.push(i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    stack.locate(0);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>  \u6d4b\u8bd5\u7ed3\u679c</p> \u6d4b\u8bd5\u7528\u4f8b \u6d4b\u8bd5\u5e73\u53f0 \u8fd0\u884c\u65f6\u95f4 \u6d4b\u8bd5\u7528\u4f8b 1 Huawei Phone 0.037333 ms \u6d4b\u8bd5\u7528\u4f8b 2 Huawei Phone 0.000065 ms"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/%40ohos.util.Stack/#ohosutilstackpush","title":"@ohos.util.Stack.push","text":"<p> \u5b98\u65b9API\u6587\u6863</p> <p> \u6d4b\u8bd5\u7528\u4f8b 1: \u6d4b\u8bd5Stack\u5bb9\u5668push\u63a5\u53e3 </p> <p><pre><code>function test_push(loopCount: number) {\n  let stack = new Stack&lt;number&gt;();\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    stack.push(1);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>  \u6d4b\u8bd5\u7ed3\u679c</p> \u6d4b\u8bd5\u7528\u4f8b \u6d4b\u8bd5\u5e73\u53f0 \u8fd0\u884c\u65f6\u95f4 \u6d4b\u8bd5\u7528\u4f8b 1 Huawei Phone 0.000128 ms"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/%40ohos.util.Stack/#ohosutilstackpeek","title":"@ohos.util.Stack.peek","text":"<p> \u5b98\u65b9API\u6587\u6863</p> <p> \u6d4b\u8bd5\u7528\u4f8b 1: \u6d4b\u8bd5Stack\u5bb9\u5668peek\u63a5\u53e3 </p> <p><pre><code>function test_peek(loopCount: number){\n  let stack = new Stack&lt;number&gt;();\n  for (let i = 0; i &lt; 5000000; i++) {\n    stack.push(i);\n  }\n    const startTime = new Date();\n    for (let i = 0; i &lt; loopCount; i++) {\n      stack.peek();\n    }\n    const endTime = new Date();\n    const executionTime = endTime.getTime() - startTime.getTime();\n    const averageTime = executionTime / loopCount;\n    console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>  \u6d4b\u8bd5\u7ed3\u679c</p> \u6d4b\u8bd5\u7528\u4f8b \u6d4b\u8bd5\u5e73\u53f0 \u8fd0\u884c\u65f6\u95f4 \u6d4b\u8bd5\u7528\u4f8b 1 Huawei Phone 0.000060 ms"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/%40ohos.util.Stack/#ohosutilstackpop","title":"@ohos.util.Stack.pop","text":"<p> \u5b98\u65b9API\u6587\u6863</p> <p> \u6d4b\u8bd5\u7528\u4f8b 1: \u6d4b\u8bd5Stack\u5bb9\u5668pop\u63a5\u53e3 </p> <p><pre><code>function test_pop(loopCount: number) {\n  let stack = new Stack&lt;number&gt;();\n  for (let i = 0; i &lt; 500000; i++) {\n    stack.push(i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    stack.pop();\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>  \u6d4b\u8bd5\u7ed3\u679c</p> \u6d4b\u8bd5\u7528\u4f8b \u6d4b\u8bd5\u5e73\u53f0 \u8fd0\u884c\u65f6\u95f4 \u6d4b\u8bd5\u7528\u4f8b 1 Huawei Phone 0.000064 ms"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/%40ohos.util.TreeMap/","title":"@ohos.util.TreeMap","text":""},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/%40ohos.util.TreeMap/#ohosutiltreemaphaskey","title":"@ohos.util.TreeMap.hasKey","text":"<p> \u5b98\u65b9API\u6587\u6863</p> <p> \u6d4b\u8bd5\u7528\u4f8b 1: \u6d4b\u8bd5TreeMap\u5bb9\u5668hasKey\u63a5\u53e3 </p> <p><pre><code>function test_hasKey(loopCount: number) {\n  let treemap = new TreeMap&lt;number,number&gt;();\n  for (let i = 0; i &lt; 500000; i++) {\n    treemap.set(i,i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    treemap.hasKey(i);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>  \u6d4b\u8bd5\u7ed3\u679c</p> \u6d4b\u8bd5\u7528\u4f8b \u6d4b\u8bd5\u5e73\u53f0 \u8fd0\u884c\u65f6\u95f4 \u6d4b\u8bd5\u7528\u4f8b 1 Huawei Phone 0.000333 ms"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/%40ohos.util.TreeMap/#ohosutiltreemapset","title":"@ohos.util.TreeMap.set","text":"<p> \u5b98\u65b9API\u6587\u6863</p> <p> \u6d4b\u8bd5\u7528\u4f8b 1: \u6d4b\u8bd5TreeMap\u5bb9\u5668set\u63a5\u53e3 </p> <p><pre><code>function test_set(loopCount: number) {\n  let treemap = new TreeMap&lt;number,number&gt;();\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    treemap.set(i,i);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>  \u6d4b\u8bd5\u7ed3\u679c</p> \u6d4b\u8bd5\u7528\u4f8b \u6d4b\u8bd5\u5e73\u53f0 \u8fd0\u884c\u65f6\u95f4 \u6d4b\u8bd5\u7528\u4f8b 1 Huawei Phone 0.000000 ms"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/%40ohos.util.TreeMap/#ohosutiltreemapremove","title":"@ohos.util.TreeMap.remove","text":"<p> \u5b98\u65b9API\u6587\u6863</p> <p> \u6d4b\u8bd5\u7528\u4f8b 1: \u6d4b\u8bd5TreeMap\u5bb9\u5668remove\u63a5\u53e3 </p> <p><pre><code>function test_remove(loopCount: number) {\n  let treemap = new TreeMap&lt;number,number&gt;();\n  for (let i = 0; i &lt; 500000; i++) {\n    treemap.set(i,i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    treemap.remove(i);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>  \u6d4b\u8bd5\u7ed3\u679c</p> \u6d4b\u8bd5\u7528\u4f8b \u6d4b\u8bd5\u5e73\u53f0 \u8fd0\u884c\u65f6\u95f4 \u6d4b\u8bd5\u7528\u4f8b 1 Huawei Phone 0.000333 ms"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/%40ohos.util.TreeMap/#ohosutiltreemapreplace","title":"@ohos.util.TreeMap.replace","text":"<p> \u5b98\u65b9API\u6587\u6863</p> <p> \u6d4b\u8bd5\u7528\u4f8b 1: \u6d4b\u8bd5TreeMap\u5bb9\u5668replace\u63a5\u53e3 </p> <p><pre><code>function test_replace(loopCount: number) {\n  let treemap = new TreeMap&lt;number,number&gt;();\n  for (let i = 0; i &lt; 500000; i++) {\n    treemap.set(i,i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    treemap.replace(i,i);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>  \u6d4b\u8bd5\u7ed3\u679c</p> \u6d4b\u8bd5\u7528\u4f8b \u6d4b\u8bd5\u5e73\u53f0 \u8fd0\u884c\u65f6\u95f4 \u6d4b\u8bd5\u7528\u4f8b 1 Huawei Phone 0.000333 ms"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/%40ohos.util.TreeMap/#ohosutiltreemaphasvalue","title":"@ohos.util.TreeMap.hasValue","text":"<p> \u5b98\u65b9API\u6587\u6863</p> <p> \u6d4b\u8bd5\u7528\u4f8b 1: \u6d4b\u8bd5TreeMap\u5bb9\u5668hasValue\u63a5\u53e3 </p> <p><pre><code>function test_hasValue(loopCount: number) {\n  let treemap = new TreeMap&lt;number,number&gt;();\n  for (let i = 0; i &lt; 500000; i++) {\n    treemap.set(i,i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    treemap.hasValue(i);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>  \u6d4b\u8bd5\u7ed3\u679c</p> \u6d4b\u8bd5\u7528\u4f8b \u6d4b\u8bd5\u5e73\u53f0 \u8fd0\u884c\u65f6\u95f4 \u6d4b\u8bd5\u7528\u4f8b 1 Huawei Phone 1.024667 ms"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/%40ohos.util.TreeSet/","title":"@ohos.util.TreeSet","text":""},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/%40ohos.util.TreeSet/#ohosutiltreesetremove","title":"@ohos.util.TreeSet.remove","text":"<p> \u5b98\u65b9API\u6587\u6863</p> <p> \u6d4b\u8bd5\u7528\u4f8b 1: \u6d4b\u8bd5TreeSet\u5bb9\u5668remove\u63a5\u53e3 </p> <p><pre><code>function test_remove(loopCount: number) {\n  let treeset = new TreeSet&lt;number&gt;();\n  for (let i = 0; i &lt; 500000; i++) {\n    treeset.add(i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    treeset.remove(i);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>  \u6d4b\u8bd5\u7ed3\u679c</p> \u6d4b\u8bd5\u7528\u4f8b \u6d4b\u8bd5\u5e73\u53f0 \u8fd0\u884c\u65f6\u95f4 \u6d4b\u8bd5\u7528\u4f8b 1 Huawei Phone 0.000667 ms"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/%40ohos.util.TreeSet/#ohosutiltreesethas","title":"@ohos.util.TreeSet.has","text":"<p> \u5b98\u65b9API\u6587\u6863</p> <p> \u6d4b\u8bd5\u7528\u4f8b 1: \u6d4b\u8bd5TreeSet\u5bb9\u5668has\u63a5\u53e3 </p> <p><pre><code>function test_has(loopCount: number) {\n  let treeset = new TreeSet&lt;number&gt;();\n  for (let i = 0; i &lt; 500000; i++) {\n    treeset.add(i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    treeset.has(500000);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>  \u6d4b\u8bd5\u7ed3\u679c</p> \u6d4b\u8bd5\u7528\u4f8b \u6d4b\u8bd5\u5e73\u53f0 \u8fd0\u884c\u65f6\u95f4 \u6d4b\u8bd5\u7528\u4f8b 1 Huawei Phone 0.000000 ms"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/%40ohos.util.TreeSet/#ohosutiltreesetadd","title":"@ohos.util.TreeSet.add","text":"<p> \u5b98\u65b9API\u6587\u6863</p> <p> \u6d4b\u8bd5\u7528\u4f8b 1: \u6d4b\u8bd5TreeSet\u5bb9\u5668add\u63a5\u53e3 </p> <p><pre><code>function test_add(loopCount: number) {\n  let treeset = new TreeSet&lt;number&gt;();\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    treeset.add(i);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>  \u6d4b\u8bd5\u7ed3\u679c</p> \u6d4b\u8bd5\u7528\u4f8b \u6d4b\u8bd5\u5e73\u53f0 \u8fd0\u884c\u65f6\u95f4 \u6d4b\u8bd5\u7528\u4f8b 1 Huawei Phone 0.000540 ms"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/%40ohos.util.Vector/","title":"@ohos.util.Vector","text":""},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/%40ohos.util.Vector/#ohosutilvectoradd","title":"@ohos.util.Vector.add","text":"<p> \u5b98\u65b9API\u6587\u6863</p> <p> \u6d4b\u8bd5\u7528\u4f8b 1: \u6d4b\u8bd5Vector\u5bb9\u5668add\u63a5\u53e3 </p> <p><pre><code>function test_add(loopCount: number) {\n  let vector = new Vector&lt;number&gt;();\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    vector.add(1);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>  \u6d4b\u8bd5\u7ed3\u679c</p> \u6d4b\u8bd5\u7528\u4f8b \u6d4b\u8bd5\u5e73\u53f0 \u8fd0\u884c\u65f6\u95f4 \u6d4b\u8bd5\u7528\u4f8b 1 Huawei Phone 0.000192 ms"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/%40ohos.util.Vector/#ohosutilvectorhas","title":"@ohos.util.Vector.has","text":"<p> \u5b98\u65b9API\u6587\u6863</p> <p> \u6d4b\u8bd5\u7528\u4f8b 1: \u6d4b\u8bd5\u5728\u6700\u574f\u60c5\u51b5\u4e0b\uff08\u67e5\u627e\u5143\u7d20\u4e0d\u5b58\u5728\u7684\u60c5\u51b5\uff09Vector\u5bb9\u5668\u7684has\u63a5\u53e3\uff0cVector\u957f\u5ea6\u4e3a500000 </p> <p><pre><code>function test_has(loopCount: number) {\n  let vector = new Vector&lt;number&gt;();\n  for (let i = 0; i &lt; 500000; i++) {\n    vector.add(i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    vector.has(500000);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>  \u6d4b\u8bd5\u7528\u4f8b 2: \u6d4b\u8bd5\u5728\u6700\u4f18\u60c5\u51b5\u4e0b\uff08\u67e5\u627e\u5143\u7d20\u4e3a\u7b2c\u4e00\u4e2a\uff09Vector\u5bb9\u5668\u7684has\u63a5\u53e3\uff0cVector\u957f\u5ea6\u4e3a500000 </p> <p><pre><code>function test_has2(loopCount: number) {\n  let vector = new Vector&lt;number&gt;();\n  for (let i = 0; i &lt; 500000; i++) {\n    vector.add(i);\n  }\n  const startTime = new Date();\n  for (let i = 0; i &lt; loopCount; i++) {\n    vector.has(0);\n  }\n  const endTime = new Date();\n  const executionTime = endTime.getTime() - startTime.getTime();\n  const averageTime = executionTime / loopCount;\n  console.log(`!${test_id}: ${averageTime} ms`);\n}\n</code></pre>  \u6d4b\u8bd5\u7ed3\u679c</p> \u6d4b\u8bd5\u7528\u4f8b \u6d4b\u8bd5\u5e73\u53f0 \u8fd0\u884c\u65f6\u95f4 \u6d4b\u8bd5\u7528\u4f8b 1 Huawei Phone 0.463000 ms \u6d4b\u8bd5\u7528\u4f8b 2 Huawei Phone 0.000333 ms"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/TS.ArrayList/","title":"TS.ArrayList","text":""},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/TS.ArrayList/#arrayprototypesplice","title":"Array.prototype.splice","text":"<p> \u6d4b\u8bd5\u7528\u4f8b 1: \u6d4b\u8bd5\u539f\u751f\u6570\u7ec4splice\u63a5\u53e3\u7528\u4e8e\u63d2\u5165\u5143\u7d20 </p> <p><pre><code>  function test_array_splice_insert(loopCount: number) {\n    let list: number[] = [];\n    const startTime = new Date();\n    for (let i = 0; i &lt; loopCount; i++) {\n      list.splice(0, 0, i);\n    }\n    const endTime = new Date();\n    const executionTime = endTime.getTime() - startTime.getTime();\n    const averageTime = executionTime / loopCount;\n    console.log(`!${test_id}: ${averageTime} ms`);\n  }\n</code></pre>  \u6d4b\u8bd5\u7ed3\u679c</p> \u6d4b\u8bd5\u7528\u4f8b \u6d4b\u8bd5\u5e73\u53f0 \u8fd0\u884c\u65f6\u95f4 \u6d4b\u8bd5\u7528\u4f8b 1 node 0.002620 ms"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/TS.ArrayList/#arrayprototypeincludes","title":"Array.prototype.includes","text":"<p> \u6d4b\u8bd5\u7528\u4f8b 1: \u6d4b\u8bd5\u5728\u6700\u574f\u60c5\u51b5\u4e0b\uff08\u67e5\u627e\u5143\u7d20\u4e0d\u5b58\u5728\u7684\u60c5\u51b5\uff09\u539f\u751f\u6570\u7ec4\u7684includes\u63a5\u53e3\uff0c\u6570\u7ec4\u957f\u5ea6\u4e3a500000 </p> <p><pre><code>  function test_array_includes_worst(loopCount: number) {\n    let list = Array.from({ length: 500000 }, (_, i) =&gt; i);\n    const startTime = new Date();\n    for (let i = 0; i &lt; loopCount; i++) {\n      list.includes(500000);\n    }\n    const endTime = new Date();\n    const executionTime = endTime.getTime() - startTime.getTime();\n    const averageTime = executionTime / loopCount;\n    console.log(`!${test_id}: ${averageTime} ms`);\n  }\n</code></pre>  \u6d4b\u8bd5\u7528\u4f8b 2: \u6d4b\u8bd5\u5728\u6700\u4f18\u60c5\u51b5\u4e0b\uff08\u67e5\u627e\u5143\u7d20\u4e3a\u7b2c\u4e00\u4e2a\uff09\u539f\u751f\u6570\u7ec4\u7684includes\u63a5\u53e3\uff0c\u6570\u7ec4\u957f\u5ea6\u4e3a500000 </p> <p><pre><code>  function test_array_includes_best(loopCount: number) {\n    let list = Array.from({ length: 500000 }, (_, i) =&gt; i);\n    const startTime = new Date();\n    for (let i = 0; i &lt; loopCount; i++) {\n      list.includes(0);\n    }\n    const endTime = new Date();\n    const executionTime = endTime.getTime() - startTime.getTime();\n    const averageTime = executionTime / loopCount;\n    console.log(`!${test_id}: ${averageTime} ms`);\n  }\n</code></pre>  \u6d4b\u8bd5\u7ed3\u679c</p> \u6d4b\u8bd5\u7528\u4f8b \u6d4b\u8bd5\u5e73\u53f0 \u8fd0\u884c\u65f6\u95f4 \u6d4b\u8bd5\u7528\u4f8b 1 node 0.376333 ms \u6d4b\u8bd5\u7528\u4f8b 2 node 0.000001 ms"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/TS.ArrayList/#arrayprototypepush","title":"Array.prototype.push","text":"<p> \u6d4b\u8bd5\u7528\u4f8b 1: \u6d4b\u8bd5\u539f\u751f\u6570\u7ec4push\u63a5\u53e3 </p> <p><pre><code>function test_array_push(loopCount: number) {\n    let list = [];\n    const startTime = new Date();\n    for (let i = 0; i &lt; loopCount; i++) {\n      list.push(1);\n    }\n    const endTime = new Date();\n    const executionTime = endTime.getTime() - startTime.getTime();\n    const averageTime = executionTime / loopCount;\n    console.log(`!${test_id}: ${averageTime} ms`);\n  }\n</code></pre>  \u6d4b\u8bd5\u7ed3\u679c</p> \u6d4b\u8bd5\u7528\u4f8b \u6d4b\u8bd5\u5e73\u53f0 \u8fd0\u884c\u65f6\u95f4 \u6d4b\u8bd5\u7528\u4f8b 1 node 0.000016 ms"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/TS.HashMap/","title":"TS.HashMap","text":""},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/TS.HashMap/#mapprototypehas","title":"Map.prototype.has","text":"<p> \u6d4b\u8bd5\u7528\u4f8b 1: \u6d4b\u8bd5Map\u5bf9\u8c61\u7684has\u63a5\u53e3\uff08\u6700\u597d\u60c5\u51b5\uff09\uff0cMap\u957f\u5ea6\u4e3a1000000 </p> <p><pre><code>  function test_map_hasKey_best(loopCount: number) {\n    let map = new Map&lt;number, number&gt;();\n    for (let i = 0; i &lt; 1000000; i++) {\n      map.set(i, 1)\n    }\n    const startTime = new Date();\n    for (let i = 0; i &lt; loopCount; i++) {\n      map.has(0)\n    }\n    const endTime = new Date();\n    const executionTime = endTime.getTime() - startTime.getTime();\n    const averageTime = executionTime / loopCount;\n    console.log(`!${test_id}: ${averageTime} ms`);\n  }\n</code></pre>  \u6d4b\u8bd5\u7528\u4f8b 2: \u6d4b\u8bd5Map\u5bf9\u8c61\u7684has\u63a5\u53e3\uff08\u6700\u574f\u60c5\u51b5\uff09\uff0cMap\u957f\u5ea6\u4e3a1000000 </p> <p><pre><code>  function test_map_hasKey_worst(loopCount: number) {\n    let map = new Map&lt;number, number&gt;();\n    for (let i = 0; i &lt; 1000000; i++) {\n      map.set(i, 1)\n    }\n    const startTime = new Date();\n    for (let i = 0; i &lt; loopCount; i++) {\n      map.has(1000000)\n    }\n    const endTime = new Date();\n    const executionTime = endTime.getTime() - startTime.getTime();\n    const averageTime = executionTime / loopCount;\n    console.log(`!${test_id}: ${averageTime} ms`);\n  }\n</code></pre>  \u6d4b\u8bd5\u7ed3\u679c</p> \u6d4b\u8bd5\u7528\u4f8b \u6d4b\u8bd5\u5e73\u53f0 \u8fd0\u884c\u65f6\u95f4 \u6d4b\u8bd5\u7528\u4f8b 1 node 0.000004 ms \u6d4b\u8bd5\u7528\u4f8b 2 node 0.000003 ms"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/TS.HashMap/#mapprototypehasvalue","title":"Map.prototype.hasValue","text":"<p> \u6d4b\u8bd5\u7528\u4f8b 1: \u6d4b\u8bd5Map\u7ed3\u5408Array\u7684\u65b9\u5f0f\u6a21\u62df\u7684hasValue\u63a5\u53e3\uff08\u6700\u597d\u60c5\u51b5\uff09\uff0cMap\u957f\u5ea6\u4e3a1000000 </p> <p><pre><code>  function test_map_hasValue_best(loopCount: number) {\n    let map = new Map&lt;number, number&gt;();\n    for (let i = 0; i &lt; 1000000; i++) {\n      map.set(i, i)\n    }\n    const startTime = new Date();\n    for (let i = 0; i &lt; loopCount; i++) {\n      Array.from(map.values()).includes(0);\n    }\n    const endTime = new Date();\n    const executionTime = endTime.getTime() - startTime.getTime();\n    const averageTime = executionTime / loopCount;\n    console.log(`!${test_id}: ${averageTime} ms`);\n  }\n</code></pre>  \u6d4b\u8bd5\u7528\u4f8b 2: \u6d4b\u8bd5Map\u7ed3\u5408Array\u7684\u65b9\u5f0f\u6a21\u62df\u7684hasValue\u63a5\u53e3\uff08\u6700\u574f\u60c5\u51b5\uff09\uff0cMap\u957f\u5ea6\u4e3a1000000 </p> <p><pre><code>  function test_map_hasValue_worst(loopCount: number) {\n    let map = new Map&lt;number, number&gt;();\n    for (let i = 0; i &lt; 1000000; i++) {\n      map.set(i, i)\n    }\n    const startTime = new Date();\n    for (let i = 0; i &lt; loopCount; i++) {\n      Array.from(map.values()).includes(1000000);\n    }\n    const endTime = new Date();\n    const executionTime = endTime.getTime() - startTime.getTime();\n    const averageTime = executionTime / loopCount;\n    console.log(`!${test_id}: ${averageTime} ms`);\n  }\n</code></pre>  \u6d4b\u8bd5\u7ed3\u679c</p> \u6d4b\u8bd5\u7528\u4f8b \u6d4b\u8bd5\u5e73\u53f0 \u8fd0\u884c\u65f6\u95f4 \u6d4b\u8bd5\u7528\u4f8b 1 node 4.100000 ms \u6d4b\u8bd5\u7528\u4f8b 2 node 4.830000 ms"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/TS.HashMap/#mapprototypeset","title":"Map.prototype.set","text":"<p> \u6d4b\u8bd5\u7528\u4f8b 1: \u6d4b\u8bd5Map\u5bf9\u8c61\u7684set\u63a5\u53e3 </p> <p><pre><code>function test_map_set(loopCount: number) {\n    let map = new Map&lt;number, number&gt;();\n    const startTime = new Date();\n    for (let i = 0; i &lt; loopCount; i++) {\n      map.set(i, 1);\n    }\n    const endTime = new Date();\n    const executionTime = endTime.getTime() - startTime.getTime();\n    const averageTime = executionTime / loopCount;\n    console.log(`!${test_id}: ${averageTime} ms`);\n  }\n</code></pre>  \u6d4b\u8bd5\u7ed3\u679c</p> \u6d4b\u8bd5\u7528\u4f8b \u6d4b\u8bd5\u5e73\u53f0 \u8fd0\u884c\u65f6\u95f4 \u6d4b\u8bd5\u7528\u4f8b 1 node 0.000071 ms"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/TS.HashMap/#mapprototypeget","title":"Map.prototype.get","text":"<p> \u6d4b\u8bd5\u7528\u4f8b 1: \u6d4b\u8bd5Map\u5bf9\u8c61\u7684get\u63a5\u53e3 </p> <p><pre><code>  function test_map_get(loopCount: number) {\n    let map = new Map&lt;number, number&gt;();\n    for (let i = 0; i &lt; loopCount; i++) {\n      map.set(i, 1);\n    }\n    const startTime = new Date();\n    for (let i = 0; i &lt; loopCount; i++) {\n      map.get(i);\n    }\n    const endTime = new Date();\n    const executionTime = endTime.getTime() - startTime.getTime();\n    const averageTime = executionTime / loopCount;\n    console.log(`!${test_id}: ${averageTime} ms`);\n  }\n</code></pre>  \u6d4b\u8bd5\u7ed3\u679c</p> \u6d4b\u8bd5\u7528\u4f8b \u6d4b\u8bd5\u5e73\u53f0 \u8fd0\u884c\u65f6\u95f4 \u6d4b\u8bd5\u7528\u4f8b 1 node 0.000024 ms"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/TS.HashSet/","title":"TS.HashSet","text":""},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/TS.HashSet/#setprototypedelete","title":"Set.prototype.delete","text":"<p> \u6d4b\u8bd5\u7528\u4f8b 1: \u6d4b\u8bd5Set\u5bb9\u5668delete\u63a5\u53e3 </p> <p><pre><code>  function test_set_remove(loopCount: number) {\n    let set = new Set&lt;number&gt;();\n    for (let i = 0; i &lt; loopCount; i++) {\n      set.add(i);\n    }\n    const startTime = new Date();\n    for (let i = 0; i &lt; loopCount; i++) {\n      set.delete(i);\n    }\n    const endTime = new Date();\n    const executionTime = endTime.getTime() - startTime.getTime();\n    const averageTime = executionTime / loopCount;\n    console.log(`!${test_id}: ${averageTime} ms`);\n  }\n</code></pre>  \u6d4b\u8bd5\u7ed3\u679c</p> \u6d4b\u8bd5\u7528\u4f8b \u6d4b\u8bd5\u5e73\u53f0 \u8fd0\u884c\u65f6\u95f4 \u6d4b\u8bd5\u7528\u4f8b 1 node 0.000042 ms"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/TS.HashSet/#setprototypeentries","title":"Set.prototype.entries","text":"<p> \u6d4b\u8bd5\u7528\u4f8b 1: \u6d4b\u8bd5Set\u5bb9\u5668\u7684entries\u63a5\u53e3\uff0cset\u957f\u5ea6\u4e3a\u8f93\u5165\u7684loopCount </p> <p><pre><code>  function test_set_entries(loopCount: number) {\n    let set = new Set&lt;number&gt;();\n    for (let i = 0; i &lt; loopCount; i++) {\n      set.add(i);\n    }\n    const startTime = new Date();\n    for (let i = 0; i &lt; loopCount; i++) {\n      set.entries();\n    }\n    const endTime = new Date();\n    const executionTime = endTime.getTime() - startTime.getTime();\n    const averageTime = executionTime / loopCount;\n    console.log(`!${test_id}: ${averageTime} ms`);\n  }\n</code></pre>  \u6d4b\u8bd5\u7ed3\u679c</p> \u6d4b\u8bd5\u7528\u4f8b \u6d4b\u8bd5\u5e73\u53f0 \u8fd0\u884c\u65f6\u95f4 \u6d4b\u8bd5\u7528\u4f8b 1 node 0.000002 ms"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/TS.HashSet/#setprototypevalues","title":"Set.prototype.values","text":"<p> \u6d4b\u8bd5\u7528\u4f8b 1: \u6d4b\u8bd5Set\u5bb9\u5668\u7684values\u63a5\u53e3\uff0cset\u957f\u5ea6\u4e3a\u8f93\u5165\u7684loopCount </p> <p><pre><code>  function test_set_values(loopCount: number) {\n    let set = new Set&lt;number&gt;();\n    for (let i = 0; i &lt; loopCount; i++) {\n      set.add(i);\n    }\n    const startTime = new Date();\n    for (let i = 0; i &lt; loopCount; i++) {\n      set.values();\n    }\n    const endTime = new Date();\n    const executionTime = endTime.getTime() - startTime.getTime();\n    const averageTime = executionTime / loopCount;\n    console.log(`!${test_id}: ${averageTime} ms`);\n  }\n</code></pre>  \u6d4b\u8bd5\u7ed3\u679c</p> \u6d4b\u8bd5\u7528\u4f8b \u6d4b\u8bd5\u5e73\u53f0 \u8fd0\u884c\u65f6\u95f4 \u6d4b\u8bd5\u7528\u4f8b 1 node 0.000004 ms"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/TS.HashSet/#setprototypehas","title":"Set.prototype.has","text":"<p> \u6d4b\u8bd5\u7528\u4f8b 1: \u6d4b\u8bd5\u5728\u6700\u574f\u60c5\u51b5\u4e0b\uff08\u67e5\u627e\u5143\u7d20\u4e0d\u5b58\u5728\u7684\u60c5\u51b5\uff09Set\u5bb9\u5668\u7684has\u63a5\u53e3\uff0cset\u957f\u5ea6\u4e3a500000 </p> <p><pre><code>  function test_set_has_worst(loopCount: number) {\n    let set = new Set&lt;number&gt;();\n    for (let i = 0; i &lt; 500000; i++) {\n      set.add(i);\n    }\n    const startTime = new Date();\n    for (let i = 0; i &lt; loopCount; i++) {\n      set.has(500000);\n    }\n    const endTime = new Date();\n    const executionTime = endTime.getTime() - startTime.getTime();\n    const averageTime = executionTime / loopCount;\n    console.log(`!${test_id}: ${averageTime} ms`);\n  }\n</code></pre>  \u6d4b\u8bd5\u7528\u4f8b 2: \u6d4b\u8bd5\u5728\u6700\u4f18\u60c5\u51b5\u4e0b\uff08\u67e5\u627e\u5143\u7d20\u4e3a\u7b2c\u4e00\u4e2a\uff09Set\u5bb9\u5668\u7684has\u63a5\u53e3\uff0cset\u957f\u5ea6\u4e3a5000000 </p> <p><pre><code>  function test_set_has_best(loopCount: number) {\n    let set = new Set&lt;number&gt;();\n    for (let i = 0; i &lt; 500000; i++) {\n      set.add(i);\n    }\n    const startTime = new Date();\n    for (let i = 0; i &lt; loopCount; i++) {\n      set.has(0);\n    }\n    const endTime = new Date();\n    const executionTime = endTime.getTime() - startTime.getTime();\n    const averageTime = executionTime / loopCount;\n    console.log(`!${test_id}: ${averageTime} ms`);\n  }\n</code></pre>  \u6d4b\u8bd5\u7ed3\u679c</p> \u6d4b\u8bd5\u7528\u4f8b \u6d4b\u8bd5\u5e73\u53f0 \u8fd0\u884c\u65f6\u95f4 \u6d4b\u8bd5\u7528\u4f8b 1 node 0.000006 ms \u6d4b\u8bd5\u7528\u4f8b 2 node 0.000008 ms"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/TS.HashSet/#setprototypeforeach","title":"Set.prototype.forEach","text":"<p> \u6d4b\u8bd5\u7528\u4f8b 1: \u6d4b\u8bd5Set\u5bb9\u5668\u7684forEach\u63a5\u53e3,set\u957f\u5ea6\u4e3a500000 </p> <p><pre><code>  function test_set_forEach(loopCount: number) {\n    let set = new Set&lt;number&gt;();\n    for (let i = 0; i &lt; 500000; i++) {\n      set.add(i);\n    }\n    const startTime = new Date();\n    for (let i = 0; i &lt; loopCount; i++) {\n      set.forEach((value, key) =&gt; {\n      });\n    }\n    const endTime = new Date();\n    const executionTime = endTime.getTime() - startTime.getTime();\n    const averageTime = executionTime / loopCount;\n    console.log(`!${test_id}: ${averageTime} ms`);\n  }\n</code></pre>  \u6d4b\u8bd5\u7ed3\u679c</p> \u6d4b\u8bd5\u7528\u4f8b \u6d4b\u8bd5\u5e73\u53f0 \u8fd0\u884c\u65f6\u95f4 \u6d4b\u8bd5\u7528\u4f8b 1 node 1.400000 ms"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/TS.HashSet/#setprototypeadd","title":"Set.prototype.add","text":"<p> \u6d4b\u8bd5\u7528\u4f8b 1: \u6d4b\u8bd5Set\u5bb9\u5668add\u63a5\u53e3 </p> <p><pre><code>function test_set_add(loopCount: number) {\n    let set = new Set&lt;number&gt;();\n    const startTime = new Date();\n    for (let i = 0; i &lt; loopCount; i++) {\n      set.add(1);\n    }\n    const endTime = new Date();\n    const executionTime = endTime.getTime() - startTime.getTime();\n    const averageTime = executionTime / loopCount;\n    console.log(`!${test_id}: ${averageTime} ms`);\n  }\n</code></pre>  \u6d4b\u8bd5\u7ed3\u679c</p> \u6d4b\u8bd5\u7528\u4f8b \u6d4b\u8bd5\u5e73\u53f0 \u8fd0\u884c\u65f6\u95f4 \u6d4b\u8bd5\u7528\u4f8b 1 node 0.000006 ms"}]}